/*
 * Sphere.cpp
 * RVO2-3D Library
 *
 * Copyright 2008 University of North Carolina at Chapel Hill
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Please send all bug reports to <geom@cs.unc.edu>.
 *
 * The authors may be contacted via:
 *
 * Jur van den Berg, Stephen J. Guy, Jamie Snape, Ming C. Lin, Dinesh Manocha
 * Dept. of Computer Science
 * 201 S. Columbia St.
 * Frederick P. Brooks, Jr. Computer Science Bldg.
 * Chapel Hill, N.C. 27599-3175
 * United States of America
 *
 * <http://gamma.cs.unc.edu/RVO2/>
 */

/* Example file showing a demo with 812 agents initially positioned evenly distributed on a sphere attempting to move to the antipodal position on the sphere. */

#ifndef RVO_OUTPUT_TIME_AND_POSITIONS
#define RVO_OUTPUT_TIME_AND_POSITIONS 1
#endif

#include <cmath>
#include <cstddef>
#include <vector>

#if RVO_OUTPUT_TIME_AND_POSITIONS
#include <iostream>
#endif

#include <RVO.h>

#ifndef M_PI
const float M_PI = 3.14159265358979323846f;
#endif

/* Store the goals of the agents. */
std::vector<RVO::Vector3> goals;

void setupScenario(RVO::RVOSimulator *sim)
{
	/* Specify the global time step of the simulation. */
	//sim->setTimeStep(0.01f);
	sim->setTimeStep(0.1f);
	//sim->setTimeStep(0.01f);

	/* Specify the default parameters for agents that are subsequently added. */
	//                     dis  dis num   timeHorizon       radius     maxspeed
	//sim->setAgentDefaults(15.0f,     10,    10.0f,          1.5f,      4.0f);

	// 这里是建立一个球形，大概用了781个球的样子
	/* Add agents, specifying their start position, and store their goals on the opposite side of the environment. */
	double size = 25;
	double desity = 0.4f;
	for (float a = 0; a < M_PI; a += desity) {
		const float z = size * std::cos(a);
		const float r = size * std::sin(a);

		for (size_t i = 0; i < r / 2.5f; ++i) {
			const float x = r * std::cos(i * 2.0f * M_PI / (r / 2.5f));
			const float y = r * std::sin(i * 2.0f * M_PI / (r / 2.5f));

			// 初始化位置
			sim->addAgent(RVO::Vector3(x, y, z));
			// 设置目标位置就是对侧的另一个
			goals.push_back(-sim->getAgentPosition(sim->getNumAgents() - 1));
		}
	}
}

void setupScenario1(RVO::RVOSimulator* sim)
{
	/* Specify the global time step of the simulation. */
	//sim->setTimeStep(0.01f);
	sim->setTimeStep(0.1f);
	//sim->setTimeStep(0.01f);

	/* Specify the default parameters for agents that are subsequently added. */
	//                     dis  dis num   timeHorizon       radius     maxspeed
	float scale = 10;
	//sim->setAgentDefaults(3.5,   27,       1.5,           1.74f,      16);
	//sim->setAgentLimits(0.4, -0.3, 0.7, 0.3, 0.5);
	//sim->setAgentLimits(0.33* scale, -0.27 * scale, 0.53 * scale, 0.6 * scale, 0.4 * scale);
	//sim->setAgentDefaults(3.5f, 3.5f, 27, 2.0f, 2.0f, 1.74f, 6);
	sim->setAgentDefaults(3.5, 27, 10, 1.74f, 0.33f, 0.0010);
	//sim->setAgentLimits(0.33, -0.27, 0.53, 0.6, 0.4);
	//sim->setAgentLimits(3.3, -2.7, 5.3, 6, 4);
	//sim->setAgentLimits(2, -1.5, 3.5, 1.5, 2.5);
	// 这里是建立一个球形，大概用了781个球的样子
	/* Add agents, specifying their start position, and store their goals on the opposite side of the environment. */
	
	float a[] = { 14.4000001237,3.6,5.0,14.4000001237,1.2,15.0,16.8000000879,-6.0,0.0,1.23679637865e-07,-3.6,15.0,1.23679637865e-07,-6.0,5.0,-2.39999991208,1.2,10.0,4.80000012368,8.4,5.0,-2.4,3.6,1.11758708954e-07,0.0,-10.8,5.00000017136,-9.59999987632,-6.0,5.0,-9.59999987632,-1.2,5.0,-11.9999999121,1.2,10.0,-11.9999999121,3.6,0.0,-11.9999999121,6.0,10.0,-11.9999999121,10.8,10.0,-2.39999991208,-1.2,0.0,-4.79999987632,-3.6,15.0,7.20000008792,8.4,0.0,16.8000000879,-1.2,0.0,4.80000012368,-6.0,5.0,16.8000000879,8.4,0.0,16.8000000879,6.0,10.0,-4.79999987632,-8.4,15.0,-9.59999987632,6.0,15.0,-7.19999991208,-6.0,0.0,-7.19999991208,-1.2,0.0,-9.59999987632,1.2,15.0,-11.9999999121,-6.0,0.0,-14.3999998763,1.2,15.0,-14.3999998763,3.6,5.0,2.40000008792,8.4,0.0,1.23679637865e-07,-1.2,5.0,7.2,10.8,10.0000001118,2.40000008792,-10.8,0.0,2.40000008792,-6.0,0.0,2.40000008792,-8.4,10.0,-16.7999999121,-1.2,0.0,-11.9999999121,-3.6,10.0,-11.9999999121,-1.2,0.0,-14.3999998763,-10.8,5.0,-2.39999991208,6.0,10.0,-16.7999999121,-3.6,10.0,-4.79999987632,1.2,15.0,-7.19999991208,3.6,0.0,-7.19999991208,6.0,10.0,-7.19999991208,-10.8,0.0,-7.19999991208,-8.4,10.0,-11.9999999121,-10.8,0.0,9.60000012368,3.6,5.0,9.60000012368,1.2,15.0,14.4000001237,10.8,15.0,-4.79999987632,6.0,15.0,9.60000012368,10.8,15.0,12.0000000879,6.0,10.0,7.20000008792,3.6,0.0,7.20000008792,6.0,10.0,12.0000000879,-3.6,10.0,-14.4,-8.4,15.0000001714,-9.6,8.4,5.00000017136,-14.4,-1.2,5.00000017136,-2.4,-10.8,1.11758708954e-07,-9.6,-3.6,15.0000001714,-2.4,10.8,10.0000001118,-2.39999991208,-6.0,0.0,-16.7999999121,-8.4,10.0,-4.79999987632,-6.0,5.0,-14.3999998763,6.0,15.0,-14.3999998763,8.4,5.0,-4.79999987632,3.6,5.0,7.20000008792,-1.2,0.0,2.40000008792,10.8,10.0,2.40000008792,6.0,10.0,-7.19999991208,8.4,0.0,4.80000012368,-10.8,5.0,4.80000012368,-1.2,5.0,4.80000012368,-3.6,15.0,-16.7999999121,3.6,0.0,-16.7999999121,6.0,10.0,-11.9999999121,8.4,0.0,-4.79999987632,-1.2,5.0,-9.59999987632,10.8,15.0,-16.7999999121,-10.8,0.0,-16.7999999121,1.2,10.0,-16.7999999121,10.8,10.0,-7.19999991208,10.8,10.0,-7.19999991208,1.2,10.0,-2.39999991208,8.4,0.0,-16.7999999121,-6.0,0.0,-11.9999999121,-8.4,10.0,-16.7999999121,8.4,0.0,-9.6,3.6,5.00000017136,16.8000000879,-10.8,0.0,16.8000000879,-3.6,10.0,4.80000012368,-8.4,15.0,-9.59999987632,-10.8,5.0,-9.59999987632,-8.4,15.0,16.8000000879,-8.4,10.0,14.4000001237,-3.6,15.0,14.4000001237,-6.0,5.0,9.60000012368,-6.0,5.0,9.60000012368,-3.6,15.0,14.4000001237,-8.4,15.0,14.4000001237,-10.8,5.0,14.4000001237,-1.2,5.0,12.0000000879,-6.0,0.0,4.80000012368,3.6,5.0,4.80000012368,10.8,15.0,1.23679637865e-07,8.4,5.0,16.8000000879,10.8,10.0,1.23679637865e-07,3.6,5.0,-2.39999991208,-3.6,10.0,0.0,6.0,15.0000001714,2.4,1.2,10.0000001118,12.0000000879,8.4,0.0,16.8000000879,3.6,0.0,16.8000000879,1.2,10.0,7.20000008792,1.2,10.0,1.23679637865e-07,1.2,15.0,1.23679637865e-07,10.8,15.0,7.20000008792,-10.8,0.0,0.0,-8.4,15.0000001714,7.2,-3.6,10.0000001118,9.60000012368,-10.8,5.0,9.60000012368,-1.2,5.0,4.80000012368,6.0,15.0,14.4000001237,8.4,5.0,14.4000001237,6.0,15.0,9.60000012368,-8.4,15.0,7.20000008792,-8.4,10.0,2.40000008792,-1.2,0.0,2.40000008792,-3.6,10.0,-4.79999987632,8.4,5.0,9.60000012368,8.4,5.0,9.60000012368,6.0,15.0,2.40000008792,3.6,0.0,7.20000008792,-6.0,0.0,4.80000012368,1.2,15.0,12.0000000879,3.6,0.0,12.0000000879,-8.4,10.0,12.0000000879,-10.8,0.0,12.0000000879,-1.2,0.0,-2.4,-8.4,10.0000001118,-4.8,10.8,15.0000001714,-7.2,-3.6,10.0000001118,-14.4,-3.6,15.0000001714,-14.4,-6.0,5.00000017136,-14.4,10.8,15.0000001714,-4.79999987632,-10.8,5.0,12.0000000879,1.2,10.0,12.0000000879,10.8,10.0 };
	float b[] = { 51.818331151,-5.96046438872e-08,67.7910816547,35.8308274545,-5.96046412227e-08,80.7774609954,49.5555512562,-5.96046518808e-08,33.1701683313,-4.05787006677,-1.19209282445e-07,88.1994620105,-2.03521682888,-1.19209287774e-07,69.2251787519,-2.03521675617,-1.19209287774e-07,73.4049885836,20.9579604194,-5.96046443313e-08,64.3571050747,-17.0635719993,-1.19209289551e-07,63.3460160809,-6.06054898801,-1.19209287774e-07,69.2251788041,-29.9416192612,-1.19209289551e-07,62.6340001192,-25.2293069904,-1.19209289551e-07,62.6340001192,-39.377795258,-1.19209285998e-07,78.7603999976,-48.7927891455,-1.19209291327e-07,53.2252969033,-27.2495957584,-1.19209285998e-07,78.7036170642,-42.5944682523,-1.19209285998e-07,76.3467279824,-21.201657496,-1.19209291327e-07,55.3058953813,-14.0888372115,-1.19209285998e-07,85.0732197792,21.5265898324,-5.96046518808e-08,37.2034759945,49.4029989768,-5.96046518808e-08,37.1811940456,10.085881743,-5.9604642999e-08,69.2251787519,49.2504466931,-5.96046483281e-08,41.1922197603,50.556603191,-5.96046412227e-08,75.6672175762,-12.0675397969,-1.19209282445e-07,88.5675321293,-29.7562854155,-1.19209285998e-07,85.5852751468,-21.6078220411,-1.19209296656e-07,32.6778711478,-21.4453562231,-1.19209293103e-07,41.7290808412,-30.7661022073,-1.19209285998e-07,80.982424759,-48.4876845793,-1.19209289551e-07,61.2473483318,-39.3396946168,-1.19209285998e-07,82.783587858,-51.8183304506,-1.19209288663e-07,67.7910816547,16.983466005,-5.96046447754e-08,63.3460160288,4.09781932831e-07,-1.1324882454e-07,64.756482419,14.7770321252,-5.96046412227e-08,77.7646796049,8.71773119608,-1.1324882454e-07,64.8367155032,4.38668383539,-1.1324882454e-07,64.8302059305,6.06054966897,-1.13248823652e-07,73.4049885836,-49.2504459928,-1.19209293103e-07,41.1922197603,-46.5527474946,-1.19209285998e-07,75.7431934979,-39.3662438027,-1.19209289551e-07,62.6340001192,-41.3306423261,-1.19209287774e-07,70.9810916655,-2.10895490917,-1.19209285998e-07,77.7646777839,-50.5566024907,-1.19209285998e-07,75.6672175762,-21.9625256025,-1.19209285998e-07,83.822813947,-21.364123314,-1.19209293103e-07,46.2546856879,-20.8767258599,-1.19209287774e-07,73.408314768,-21.282890405,-1.19209291327e-07,50.7802905346,-24.9962246027,-1.19209287774e-07,72.560655986,-44.0785560735,-1.19209289551e-07,62.6340001192,29.0312235433,-5.9604642999e-08,71.6688351558,33.5260384584,-5.96046412227e-08,84.0700561521,39.3396953172,-5.96046412227e-08,82.783587858,-17.9464593295,-1.19209285998e-07,83.9697026552,32.9277656174,-5.960463767e-08,88.0523807085,42.5944689527,-5.96046412227e-08,76.3467279824,21.6078227414,-5.96046518808e-08,32.6778711478,20.8767265603,-5.9604642999e-08,73.408314768,27.2495964588,-5.96046412227e-08,78.7036170642,-34.1009292552,-1.19209282445e-07,91.9032688054,-33.1342833213,-1.19209287774e-07,71.1880332476,-49.5141399451,-1.19209287774e-07,71.2649412093,-8.71773054788,-1.72853469316e-07,64.8367155554,-32.9277649692,-1.19209282445e-07,88.0523807606,-10.5543393399,-1.19209285998e-07,77.7646790153,-4.38668313503,-1.72853469316e-07,64.8302059305,-54.5942642993,-1.72853466651e-07,76.131152702,-10.0858810426,-1.19209287774e-07,69.2251787519,-35.8347211646,-1.19209285998e-07,80.7708078136,-48.3351322979,-1.19209289107e-07,65.258374046,-13.1077898253,-1.19209289107e-07,64.7263291579,21.4453569234,-5.96046483281e-08,41.7290808412,2.03521745652,-5.9604642999e-08,73.4049885836,6.33164779881,-5.96046412227e-08,77.7646783735,-21.5265891321,-1.19209296656e-07,37.2034759945,20.9579594693,-5.9604642999e-08,68.8827099214,10.0858814028,-5.9604642999e-08,73.4049883063,12.0675404973,-5.960463767e-08,88.5675321293,-49.0978937082,-1.19209293103e-07,45.203245475,-58.5397692228,-1.19209285998e-07,77.1037329177,-48.6402368629,-1.19209290439e-07,57.2363226176,-20.957958769,-1.19209287774e-07,68.8827099214,-33.490152505,-1.19209285998e-07,84.0802758419,-48.9453414281,-1.19209293103e-07,49.214271189,-53.5424771182,-1.19209287774e-07,72.0200396289,-57.4698793293,-1.19209287774e-07,73.0689280982,-14.777031477,-1.19209285998e-07,77.7646795528,-18.9997236663,-1.19209285998e-07,77.7646801424,-21.120424587,-1.19209289995e-07,59.831500228,-49.4029982764,-1.19209296656e-07,37.1811940456,-37.2608250781,-1.19209287774e-07,71.0404299177,-49.5555505558,-1.19209296656e-07,33.1701683313,-29.0312228951,-1.19209287774e-07,71.6688352079,48.9453421285,-5.96046483281e-08,49.214271189,57.4698800297,-5.9604642999e-08,73.0689280982,14.0888379119,-5.96046412227e-08,85.0732197792,-34.6539315319,-1.19209289551e-07,62.6340001192,-25.9472331746,-1.19209285998e-07,84.3527738492,54.5942649997,-1.13248821876e-07,76.131152702,63.7846892219,-5.96046412227e-08,82.9430123377,49.5141405933,-5.9604642999e-08,71.2649411572,33.1342839695,-5.9604642999e-08,71.1880331955,30.7661029077,-5.96046412227e-08,80.982424759,62.1318540374,-5.96046412227e-08,79.1035880059,45.4340477808,-5.9604642999e-08,71.0360965177,48.3351329983,-5.96046443313e-08,65.258374046,48.6402375633,-5.96046456636e-08,57.2363226176,13.1077905257,-5.96046443313e-08,64.7263291579,21.9625263028,-5.96046412227e-08,83.822813947,6.06054963621,-5.9604642999e-08,69.2251787519,53.5424778186,-5.9604642999e-08,72.0200396289,2.03521752924,-5.9604642999e-08,69.2251787519,-6.06054896861,-1.72853468428e-07,73.4049885836,0.0436301551812,-5.960463767e-08,88.1994620626,2.10895555737,-5.96046412227e-08,77.7646778361,39.3662445031,-5.96046447754e-08,62.6340001192,49.0978944085,-5.96046483281e-08,45.203245475,58.5397699232,-5.96046412227e-08,77.1037329177,24.9962253031,-5.9604642999e-08,72.560655986,8.08198989611,-5.960463767e-08,88.1994620105,4.05787076712,-5.960463767e-08,88.1994620105,21.2828911054,-5.96046465517e-08,50.7802905346,-8.08198924791,-1.19209282445e-07,88.1994620626,18.9997243145,-5.96046412227e-08,77.7646801945,29.9416199615,-5.96046447754e-08,62.6340001192,25.2293076908,-5.96046447754e-08,62.6340001192,17.9464600298,-5.96046412227e-08,83.9697026552,41.3306430265,-5.9604642999e-08,70.9810916655,34.1009299034,-5.960463767e-08,91.9032687533,29.7562861158,-5.96046412227e-08,85.5852751468,23.2106432876,-5.96046412227e-08,77.8169979957,21.1204252873,-5.96046452195e-08,59.831500228,10.5543399881,-5.96046412227e-08,77.7646789631,-21.039191678,-1.19209289107e-07,64.3571050747,34.6539322323,-5.96046447754e-08,62.6340001192,25.947233875,-5.96046412227e-08,84.3527738492,21.2016581964,-5.96046465517e-08,55.3058953813,21.3641240144,-5.96046483281e-08,46.2546856879,14.697798265,-5.960463767e-08,91.8029359122,48.4876852797,-5.96046447754e-08,61.2473483318,37.2608257785,-5.9604642999e-08,71.0404299177,44.0785567738,-5.96046447754e-08,62.6340001192,48.7927898459,-5.96046465517e-08,53.2252969033,-6.33164715061,-1.19209285998e-07,77.7646784257,-14.6977976168,-1.19209282445e-07,91.8029359643,-23.2106426394,-1.19209285998e-07,77.8169980478,-63.7846885737,-1.19209285998e-07,82.9430123898,-45.4340471326,-1.19209287774e-07,71.0360965698,-62.1318533892,-1.19209285998e-07,79.1035880581,-10.0858807024,-1.19209287774e-07,73.4049883063,46.5527481949,-5.96046412227e-08,75.7431934979,39.3777959583,-5.96046412227e-08,78.7603999976 };
	int all_num = 0;
	for (int i = 0; i < sizeof(a)/sizeof(float);i+=3) 
	{

		// 初始化位置
		sim->addAgent(RVO::Vector3(a[i], a[i+1], a[i+2]));
		
		// 设置目标位置就是对侧的另一个
		goals.push_back(RVO::Vector3(b[i], b[i + 1], b[i + 2]));
		all_num += 1;
	}
	std::cout << "all:"<<all_num<<std::endl;
}


#include <fstream>
std::ofstream ofile;

#if RVO_OUTPUT_TIME_AND_POSITIONS
void updateVisualization(RVO::RVOSimulator *sim)
{
	/* Output the current global time. */
	//std::cout << sim->getGlobalTime();
	ofile << "[" << std::endl;
	/* Output the position for all the agents. */
	
	for (size_t i = 0; i < sim->getNumAgents(); ++i) {
		if (i < sim->getNumAgents() - 1)
			ofile << sim->getAgentPosition(i).x() << ","<< sim->getAgentPosition(i).y() <<","<< sim->getAgentPosition(i).z() << ",";
		else
			ofile << sim->getAgentPosition(i).x() << "," << sim->getAgentPosition(i).y() << "," << sim->getAgentPosition(i).z() << std::endl;
		///ofile<<sim->getAgentPosition(i);
		
	}
	

	ofile << "]" << std::endl;
	//std::cout << std::endl;
}
#endif

void setPreferredVelocities(RVO::RVOSimulator *sim)
{
	/* Set the preferred velocity to be a vector of unit magnitude (speed) in the direction of the goal. */
	// 换句话说这里就是将每一步时，飞机的偏向速度修改成指向目标的方向，并且进行了归一化，归一化以后，这样就变成了一个速度矢量
	// 应该是没有用做速度值，只是用来当方向使用，指明运动的方向更应该倾向于哪里
	for (size_t i = 0; i < sim->getNumAgents(); ++i) {
		RVO::Vector3 goalVector = goals[i] - sim->getAgentPosition(i);
		//if(sim->getAgentAcc(i).z()>0.4)
		//	std::cout << "acc：" << sim->getAgentAcc(i).z() << std::endl;
		if (RVO::absSq(goalVector) > 1.0f) {
			goalVector = RVO::normalize(goalVector);
		}

		sim->setAgentPrefVelocity(i, goalVector);
	}
}

int times = 0;
bool reachedGoal(RVO::RVOSimulator *sim)
{
	/* Check if all agents have reached their goals. */
	times++;
	if (times == 100000) 
	{
		std::cout << "timeout"   << std::endl;
		return true;
	}


	int arrived_num = 0;
	for (size_t i = 0; i < sim->getNumAgents(); ++i) {
		if (RVO::absSq(sim->getAgentPosition(i) - goals[i]) > 1){
			//4.0f * sim->getAgentRadius(i) * sim->getAgentRadius(i)) {
			
			//std::cout << "Arrived：" << arrived_num << std::endl;
			return false;
		}
		arrived_num++;
	}
	std::cout << "all arrived" <<  std::endl;
	return true;
}

#include <windows.h>
#include <ctime>
#include "atltime.h"   

int TimeDiff(SYSTEMTIME t1, SYSTEMTIME t2)
{
	CTimeSpan			sp;
	int					s1, s2;

	CTime tm1(t1.wYear, t1.wMonth, t1.wDay, 0, 0, 0);
	CTime tm2(t2.wYear, t2.wMonth, t2.wDay, 0, 0, 0);

	sp = tm1 - tm2;

	s1 = t1.wHour * 3600 + t1.wMinute * 60 + t1.wSecond;
	s2 = t2.wHour * 3600 + t2.wMinute * 60 + t2.wSecond;

	return  (int)(sp.GetDays() * 86400 + (s1 - s2));
}
#include <string> 
int main()
{

	/* Create a new simulator instance. */
	RVO::RVOSimulator *sim = new RVO::RVOSimulator();

	/* Set up the scenario. */
	setupScenario1(sim);
	SYSTEMTIME st = { 0 };
	SYSTEMTIME dt = { 0 };
	GetLocalTime(&st);  //获取当前时间 可精确到ms
	std::string now = std::to_string(_ULONGLONG(st.wMilliseconds));
	printf("%d-%02d-%02d %02d:%02d:%02d\n",
		st.wYear,
		st.wMonth,
		st.wDay,
		st.wHour,
		st.wMinute,
		st.wSecond);

	ofile.open(now+".txt", std::ios::out);
	ofile << "[" << std::endl;
	std::cout << now + ".txt" << std::endl;


	/* Perform (and manipulate) the simulation. */
	do {
#if RVO_OUTPUT_TIME_AND_POSITIONS
		// 这里就是输出当前位置信息而已
		updateVisualization(sim);
		ofile << ",";
#endif
		// 更新目标速度方向
		setPreferredVelocities(sim);
		// 开始跑模拟
		sim->doStep();
	}
	// 判定是否到达了
	while (!reachedGoal(sim));
	updateVisualization(sim);

	GetLocalTime(&dt);  //获取当前时间 可精确到ms
	printf("%d-%02d-%02d %02d:%02d:%02d\n",
		dt.wYear,
		dt.wMonth,
		dt.wDay,
		dt.wHour,
		dt.wMinute,
		dt.wSecond);


	std::cout << "time:" << TimeDiff(dt, st) <<std::endl;
	ofile << "]" << std::endl;
	ofile.close();
	std::cout <<"output: "<< now + ".txt" << std::endl;

	delete sim;

	return 0;
}
