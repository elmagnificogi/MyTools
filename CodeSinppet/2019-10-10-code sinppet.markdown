#### 位置导入json

```python
f = open(r"F:\Github\RVO2-3D-update\examples\357.txt","r")
import json
data = json.load(f)
f.close()

spheres_num = len(data[0])/3
print "spheres num:"+str(spheres_num)

base_name = "dmd"

#for i in range(spheres_num):
#    cmds.polySphere(name=base_name+'#')

cur_time = 1

sum_frames = len(data)
print sum_frames

for cur in range(sum_frames):
    cmds.currentTime(cur +1)
    for i in range(0,len(data[cur*10]),3):
        pos = [data[cur*10][i],data[cur*10][i+1],data[cur*10][i+2]]
        name = base_name + str((i/3)+1)
        cmds.move(pos[0] + 2, pos[1], pos[2], name, ws=True)
        cmds.setKeyframe(name, attribute='translate')
```



#### 位置导出json

```python
spheres = cmds.ls("dmd*", selection=True, transforms=True)
start_time = 1
end_time = 175


cmds.currentTime(start_time)
start_str = "{"
for s in spheres:
    pos = cmds.objectCenter(s, gl=True)
    #print pos
    start_str+=str(pos[0])+","+str(pos[1])+","+str(pos[2])+","
    
start_str += "}"
print start_str

cmds.currentTime(end_time)
start_str = "{"
for s in spheres:
    pos = cmds.objectCenter(s, gl=True)
    #print pos
    start_str+=str(pos[0])+","+str(pos[1])+","+str(pos[2])+","
    
start_str += "}"
print start_str
```



#### 中文测试

```
def p(f):
    print '%s.%s(): %s' % (f.__module__, f.__name__, f())
print("中文测试")
print(u"中文测试")
print(u"中文测试".decode("utf-8").encode("gbk"))
print("中文测试".decode("utf-8").encode("gbk"))
print(u"中文测试".decode("gbk").encode("utf-8"))
print("中文测试".decode("gbk").encode("utf-8"))
print("中文测试".decode("utf-8").encode("gbk"))
```



#### pyd测试

```python
D:\Autodesk\Maya2017\bin\mayapy.exe C:\Users\elmagnifico\Documents\maya\2017\plug-ins\Dmd_setup.py D:\Autodesk\Maya2017 C:\Users\elmagnifico

                
                

import os
from distutils.core import setup
from Cython.Build import cythonize
from distutils.extension import Extension

os.environ["VS90COMNTOOLS"] = os.environ["VS100COMNTOOLS"]

extensions = []
extensions.append(Extension('hanalyse', ['hanalyse.py']))

setup(
    ext_modules=cythonize(extensions, compiler_directives={'language_level': 2}),
)
```



#### closestPointOnMesh

```
closestPointOnMesh

【LV1】酷堂视效 16:58:08
可以查出点到球表面最近点的世界坐标值

【LV1】酷堂视效 16:58:35
closestPointOnMesh 节点，你可以去研究一下

closestIntersection

```



#### maya python 进度条

```
cmds.progressWindow(isInterruptable=1, max=100, min=0)
cmds.progressWindow(edit=True, progress=1)
                    if cmds.progressWindow(query=1, isCancelled=1):
                        cmds.progressWindow(endProgress=1)
                        return
                        
cmds.progressWindow(endProgress=1)
```



#### maya安装bat脚本备份

```
chcp 65001
echo 务必在maya安装目录下打开，比如：D:\Autodesk\Maya2017
SETX MAYA_LOCATION "%cd%"
SETX MAYA_PATH "%cd%"
echo 如果第一次打开失败，请使用管理员权限打开，并再次尝试
set ENV_PATH=%MAYA_LOCATION%
set EXE_PATH=\bin\mayapy.exe
set "MAYA_PATH=%ENV_PATH%%EXE_PATH%"
@echo %MAYA_PATH%

echo 提示请允许或者点击是
"%MAYA_PATH%" .\Dmd_setup.py

pause
```



#### inno setup

安装程序，备忘

```
; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Dmd_UAVC_Drama_Editor"
#define MyAppVersion "2020-08-15 113830"
#define MyAppPublisher "Dmd-elmagnifico"
#define MyAppURL "http://www.dmduav.com"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{1FCACEB7-E85E-417D-B356-51756222E15E}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DisableDirPage=yes
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
InfoBeforeFile=F:\Drama_editor\Dmd_drama_editor\Dmd_drama_editor_py\InnoSetup\InfoBeforeFile.txt
InfoAfterFile=F:\Drama_editor\Dmd_drama_editor\Dmd_drama_editor_py\更新log.txt
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputBaseFilename=mysetup
SetupIconFile=F:\Drama_editor\Dmd_drama_editor\Dmd_drama_editor_py\InnoSetup\logo.ico
Password=elmagnifico
Compression=lzma
SolidCompression=yes
WizardStyle=modern
ChangesEnvironment=true

[Languages]
Name: "chinesesimplified"; MessagesFile: "compiler:Languages\ChineseSimplified.isl"

[Files]
Source: "F:\Drama_editor\Dmd_drama_editor\Dmd_drama_editor_py\Output\*"; Excludes: "*.zip"; DestDir: "{userdocs}\maya\2017\plug-ins"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
Source: ISTask.dll; DestDir: {app}; Flags: ignoreversion

[Dirs]
Name: {code:GetDataDir}; Flags: uninsneveruninstall

[run]
Filename: "{code:GetDataDir}\bin\mayapy.exe"; Parameters: "{code:GetDataDir}"

[Code]

{ set maya path page}
var
  DataDirPage: TInputDirWizardPage;

function GetDataDir(Param: String): String;
begin
  { Return the selected DataDir }
  Result := DataDirPage.Values[0];
end;

procedure InitializeWizard;
begin
  { Create the pages }
  DataDirPage := CreateInputDirPage(wpSelectDir,
    '选择maya安装路径', '',
    '选择maya安装路径,比如 D:\Autodesk\Maya2017',
    False, '');
  DataDirPage.Add('');
end;

{ make sure maya is not running}
function IsAppRunning(const FileName : string): Boolean;
var
    FSWbemLocator: Variant;
    FWMIService   : Variant;
    FWbemObjectSet: Variant;
begin
    Result := false;
    FSWbemLocator := CreateOleObject('WBEMScripting.SWBEMLocator');
    FWMIService := FSWbemLocator.ConnectServer('', 'root\CIMV2', '', '');
    FWbemObjectSet := FWMIService.ExecQuery(Format('SELECT Name FROM Win32_Process Where Name="%s"',[FileName]));
    Result := (FWbemObjectSet.Count > 0);
    FWbemObjectSet := Unassigned;
    FWMIService := Unassigned;
    FSWbemLocator := Unassigned;
end;

function InitializeSetup(): Boolean;
begin
 Result := IsAppRunning('maya.exe');
  if Result then
  begin
      MsgBox('当前maya正在运行中,请先关闭程序后再重试! ', mbError, MB_OK); 
    result:=false;
end
else
    begin
      result := true;
    end;
end;

{ add maya setup path to env vars}
#ifdef UNICODE
  #define AW "W"
#else
  #define AW "A"
#endif
function SetEnvironmentVariable(lpName: string; lpValue: string): BOOL;
  external 'SetEnvironmentVariable{#AW}@kernel32.dll stdcall';

procedure SetEnvPath;
var
  path:String;
begin
  GetDataDir(path);
  if not SetEnvironmentVariable('MAYA_LOCATION',path) then
    MsgBox(SysErrorMessage(DLLGetLastError), mbError, MB_OK);
  if not SetEnvironmentVariable('MAYA_PATH',path) then
    MsgBox(SysErrorMessage(DLLGetLastError), mbError, MB_OK);
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssPostInstall then
  begin
    Log('Post install');
    {llAfterInstall(platform);}
    {SetEnvPath();}
    {MsgBox('test! ', mbError, MB_OK);     }
  end;
end;
```



#### maya世界坐标

```
print cmds.getAttr('pSphere1.worldMatrix[0]',time=1) 得到的坐标就是世界坐标
其世界坐标是倒数4 3 2 = x y z 与下面的相同，但是他能得到不同时间的数值而不用跳转
print cmds.objectCenter("pSphere1",gl=True)

c++中获取世界坐标
得到对应的plug以后再使用getValue对应需要MDGContex类型来表示时间，从而拿到对应值
MTime time(tick,unit);
MDGContext ctx(time);
value = plug.getValue(obj,ctx)
print value

MStatus getValue	(	MObject & 	val,
MDGContext & 	ctx = MDGContext::fsNormal 
)		const
NO SCRIPT SUPPORT.

Retrieve the current value of the attribute this plug references.

This method returns a copy of the attribute value for the plug and not a reference. The setObject method of this class can be used to modify the plug's value.

The default is to get the value at the current time. To specify an alternate time you must create a timed MDGContext that specifies the time of evaluation.

获取世界坐标的

在用了变形器的情况下不正确
cmds.getAttr('dmd9.worldMatrix[0]', time=1)[-4:-1]

任何时间都正确
cmds.objectCenter("dmd9",gl=True)

在用了变形器的情况下不正确
cmds.xform("dmd9",q=True,ws=True,t=True)

```



#### 存储到场景文件内

```
普通字符串存储
cmds.fileInfo('map_img_data_lon', lon)
width_scale = float(cmds.fileInfo('map_img_data_width_scale', query=True)[0])

转json存储
        encoded = json.dumps(self.group_info, ensure_ascii=False)
        cmds.fileInfo(self.maya_file_info, encoded)
        
json转字符串存储
        decode = cmds.fileInfo(self.maya_file_info, query=True)
        if decode != []:
            self.group_info = json.loads(decode[0].replace('\\"', '"'))
```



#### temp

```
                    <td>
                      <div th:each="role:${user.dmdRoles}">
                        <span th:text="${role.name}">无角色</span>
                      </div>
                    </td>

                    <td>
                      <span th:each="dronetype: ${instance.droneTypes}">
                              <span th:text="${dronetype.toString()} "></span>
                      </span>
                    </td>
                    <td>
                      <span th:each="func: ${instance.funcs}">
                              <span th:text="${func.toString()} "></span>
                      </span>
                    </td>
                    
                    
                                        <td>
                      <div th:each="role:${user.dmdRoles}">
                        <span th:text="${role.name}">无角色</span>
                      </div>
                    </td>

                    <td>
                      <span th:each="dronetype: ${instance.droneTypes}">
                              <span th:text="${dronetype.toString()} "></span>
                      </span>
                    </td>
                    <td>
                      <span th:each="func: ${instance.funcs}">
                              <span th:text="${func.toString()} "></span>
                      </span>
                    </td>
                    
                                                <div class="form-row">
                                <div class="form-group col-md-1">
                                    <label>功能：</label>
                                </div>
                                <div class="form-row col-md-11">
                                    <div th:if="${tempUser}" class="form-row">
                                        <div class="custom-control custom-switch" th:each="func: ${tempUser.funcs}">
                                            <input name="funcs_checked" checked="true" class="form-check-input"
                                                   type="checkbox" th:attr="id=${func}" th:value="${func.toString()}">
                                            <label class="form-check-label" th:attr="for=${func}"
                                                   th:text="${func.toString()}"></label>
                                        </div>
                                    </div>
                                    <div class="custom-control custom-switch" th:each="func: ${disfuncs}">
                                        <input name="funcs_checked" class="form-check-input" type="checkbox"
                                               th:attr="id=${func}" th:value="${func.toString()}">
                                        <label class="form-check-label" th:attr="for=${func}"
                                               th:text="${func.toString()}"></label>
                                    </div>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-1">
                                    <label>飞机类型：</label>
                                </div>
                                <div class="form-row col-md-11">
                                    <div th:if="${tempUser}" class="form-row">
                                        <div class="custom-control custom-switch"
                                             th:each="dronetype: ${tempUser.droneTypes}">
                                            <input name="dronetype_checked" checked="true" class="form-check-input"
                                                   type="checkbox" th:attr="id=${dronetype}"
                                                   th:value="${dronetype.toString()}">
                                            <label class="form-check-label" th:attr="for=${dronetype}"
                                                   th:text="${dronetype.toString()}">普通</label>
                                        </div>
                                    </div>
                                    <div class="custom-control custom-switch" th:each="dronetype: ${disdronetypes}">
                                        <input name="dronetype_checked" class="form-check-input" type="checkbox"
                                               th:attr="id=${dronetype}" th:value="${dronetype.toString()}">
                                        <label class="form-check-label" th:attr="for=${dronetype}"
                                               th:text="${dronetype.toString()}">普通</label>
                                    </div>
                                </div>
                            </div>

```



#### code转string

```

    print "启动maya"

    print "python('execfile(\""+ user_script_file_path + "\"')"

    #cmd = [maya_location+r"\bin\maya.exe", '-command', "python('execfile(r\""+ user_script_file_path + "\")')"]
    cmd = [maya_location + r"\bin\maya.exe", '-command', "commandPort -n 4434 -stp \"python\""]

    #result = os.system(maya_location+r"\bin\maya.exe")
    subprocess.Popen(cmd)

    import time
    r = "\r等待maya启动："
    for i in range(30):
        print r + '.'*(i%20)
        time.sleep(1)

    import socket

    host = 'localhost'
    port = 4434
    code1 = "print 123"

    import maya.standalone

    maya.standalone.initialize("Python")

    try:
        # Connect to Maya Command Port
        maya = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        maya.connect((host, port))
        # Send Command Through Socket --> Can Only Send MEL Commands
        message = 'python("{}")'.format(code1)
        print message
        maya.send(message)

    except:
        raise Exception, 'Connection Failed To : %s:%s' % (host, port)

    finally:
        # Close Socket Connection
        maya.close()

    import maya.standalone

    maya.standalone.initialize("Python")

    # path = os.path.dirname(__file__)
    path = r'F:\Drama_editor\Dmd_drama_editor\Dmd_drama_editor_py'

    # print u"增加debug online clean 按钮"
    import codecs

    print path + "\\maya_debug_ui.py"
    f = codecs.open(path + "\\maya_debug_ui.py", 'r', "utf-8")
    code = f.read()
    secret = base64.b64encode(code.encode('utf-8'))
    cmds_mel.eval(
        "scriptToShelf(\"debug\",\"import base64;decode = base64.b64decode(\'" + secret + "\');exec(decode)\",false)")
    f.close()

    f = codecs.open(path + r"\\Dmd_launcher.py", 'r', "utf-8")
    code = f.read()
    secret = base64.b64encode(code.encode('utf-8'))
    cmds_mel.eval(
        "scriptToShelf(\"online\",\"import base64;decode = base64.b64decode(\'" + secret + "\');exec(decode)\",false)")
    f.close()

    f = codecs.open(path + r"\\clean_output.py", 'r', "utf-8")
    code = f.read()
    secret = base64.b64encode(code.encode('utf-8'))
    cmds_mel.eval(
        "scriptToShelf(\"clean\",\"import base64;decode = base64.b64decode(\'" + secret + "\');exec(decode)\",false)")
    f.close()
```



#### 帧查询

```
        frames = set()
        # get all frames need to shift
        for s in spheres:
            frames |= set(cmds.keyframe(s, at="translate", time=(start_time, end_time), query=True, timeChange=True))

        for f in frames:
            cmds.currentTime(f)
            for s in spheres:
                if f in set(cmds.keyframe(s, at="translate", time=(start_time, end_time), query=True, timeChange=True)):
                    cmds.rotate(deg_x, deg_y, deg_z, s, pivot=(center_x, center_y, center_z), deletePriorHistory=True,
                                relative=True, worldSpace=True, forceOrderXYZ=True)
                    cmds.setKeyframe(s)
                    pos = cmds.objectCenter(s, gl=True)
                    cmds.setAttr(s + '.rotatePivotTranslate', 0, 0, 0, type="float3")
                    cmds.setAttr(s + '.rotate', 0, 0, 0, type="float3")
                    cmds.setAttr(s + '.rotatePivot', 0, 0, 0, type="float3")
                    cmds.setAttr(s + '.translate', 0, 0, 0, type="float3")
                    cmds.move(pos[0], pos[1], pos[2], s, worldSpace=True)
                    cmds.setKeyframe(s)
```



#### 字符串与二进制互相转换


```
import base64
image=r'F:\Maya\20200606161741.png'
 
#将图片encode为二进制字符串方法一
f = open(image,'rb')
id=base64.b64encode(f.read())
#print(type(str))

cmds.fileInfo( 'i_d0', id[:10240000] )
cmds.fileInfo( 'i_d1', id[10240000:20480000] )
cmds.fileInfo( 'i_d2', id[20480000:] )

id0=cmds.fileInfo( 'i_d0', q=True )[0]
id1=cmds.fileInfo( 'i_d1', q=True )[0]
id2=cmds.fileInfo( 'i_d2', q=True )[0]

print len(id0[0])
s_id = id0+id1+id2
image1=r'F:\Maya\test.png'

print len(s_id)
 
#将二进制字符串（图片）decode为图片
file_str=open(image1,'wb')
file_str.write(base64.b64decode(s_id))
file_str.close()

```



#### 电调校准读流程

```

bool MOTORS::esc_send_settings(void){
    // write
    // set flash address
    const uint8_t set_flash_address[]={0xFF, 0x00, 0x7C, 0x00, 0x10, 0xD4 };
    if (!esc_write(set_flash_address, sizeof(set_flash_address), blheli.chan)) {
        task_err("esc write BootInit err");
        return false;
    }

    if(0x30 != esc_get_ack()){
        task_err("esc read ack err");
        return false;
    }

    const uint8_t settings[] = {0xFE,0x00,0x01,0x00,0x30,0x78,0x16,0xF4,0xF5,0xA0,0x3A,0xD2,0x91,0xFC,0x91,0x73,0x16,0x8B,0xD3,0x4F,0x6A,0x93,0xCD,0xEF,0xD9,0x82,0x54,0x9C,0xAF,0xEA,0x61,0x8F,0xDC,0x89,0xE6,0x00,0x1E,0x1B,0x40,0x14,0x19,0x1E,0x02,0xF0,0x0D,0xEA,0x15,0x82,0x29,0x6D,0x54,0x93,0xBC,0xBC,0xF8,0x34,0x21,0x78,0xC1,0x5D,0xA4,0xC0,0x30,0x88,0x29,0xC1,0xD5,0xDE,0x93,0x64,0xA8,0xCE,0xE6,0x6F,0x40,0x09,0x8D,0xE9,0x0F,0xE7,0xFB,0x09,0xB6,0x82,0xBC,0x60,0xD2,0xFA,0x3F,0x4A,0x10,0xCE,0x8D,0x64,0xB0,0xAE,0x2B,0x4D,0x2F,0xC0,0xC4,0x57,0x25,0xA0,0x67,0x32,0x33,0xEE,0x19,0x1C,0x2F,0xCE,0xDF,0xD7,0x61,0xC2,0xA4,0xED,0xC8,0x33,0xB7,0x80,0xD8,0x05,0xD6,0x3D,0x51,0x48,0xD2,0x57,0x7E,0x04,0xF9,0xB0,0x47,0xD0,0x7E,0xA7,0x9D,0xFF,0x24,0x7C,0xD6,0xF8,0x0A,0x04,0x8A,0x03,0x55,0xCE,0xE7,0x89,0x59,0x1C,0xB3,0x6F,0x62,0x49,0x00,0x7C,0x07,0x38,0xF6,0x2A,0x48,0xBB,0x32,0xDD,0x57,0xEF,0x2A,0x24,0x18,0xCE,0x40,0xB9,0x43,0xCB,0x65,0x78,0x23,0x0D,0xBC,0xE3,0x22,0xAB,0x6C,0x06,0x25,0x64,0xE6,0xD3,0xAE,0xC6,0x02,0x65,0x5E,0x58,0x13,0x91,0xF3,0x68,0xBA,0x9F,0xD9,0x28,0x24,0xD6,0x8E,0x47,0x68,0x2C,0x95,0xD0,0x1B,0x16,0x48,0x94,0x39,0xD5,0x3F,0x0D,0xAE,0xFA,0xBF,0xBB,0x8B,0xBC,0x8B,0x8B,0x81,0x2D,0x3C,0x35,0x52,0x3F,0xA9,0xE6,0x11,0x4E,0x36,0x26,0x96,0x32,0x4C,0xB1,0xEC,0x73,0xEC,0x67,0xB6,0xF9,0x3B,0x85,0x5A,0xBC,0x5F,0x7B,0xE6,0x46,0x0D,0x23,0x50,0xD9};
    if (!esc_write(settings, sizeof(settings), blheli.chan)) {
        task_err("esc write BootInit err");
        return false;
    }

    if(0x30 != esc_get_ack()){
        task_err("esc read ack err");
        return false;
    }

    const uint8_t flash_it[]={0x01 ,0x01 ,0xC0 ,0x50};
    if (!esc_write(flash_it, sizeof(flash_it), blheli.chan)) {
        task_err("esc write BootInit err");
        return false;
    }

    if(0x30 != esc_get_ack()){
        task_err("esc read ack err");
        return false;
    }
}

bool MOTORS::esc_get_settings(uint8_t *buf){
    // read
    // FF 00 7C 00 10 D4
    const uint8_t cmd8[]={0xFF, 0x00, 0x7C, 0x00, 0x10, 0xD4 };
    if (!esc_write(cmd8, sizeof(cmd8), blheli.chan)) {
        task_err("esc write BootInit err");
        return false;
    }

    if(0x30 != esc_get_ack()){
        task_err("esc read ack err");
        return false;
    }

    // 03 00 00 F0
    const uint8_t cmd4[]={0x03, 0x00, 0x00, 0xF0 };
    if (!esc_write(cmd4, sizeof(cmd4), blheli.chan)) {
        task_err("esc write BootInit err");
        return false;
    }

    // read 256+3
    if (!esc_read(buf, 259, blheli.chan)) {
        task_err("esc read BootInit err");
        return false;
    }

    if(buf[258] != 0x30){
        task_err("esc read ack err");
        return false;
    }
    return true;
}

//    uint8_t reply_data[300];

//    // read
//    // FF 00 7C 00 10 D4
//    const uint8_t cmd8[]={0xFF, 0x00, 0x7C, 0x00, 0x10, 0xD4 };
//    if (!esc_write(cmd8, sizeof(cmd8), blheli.chan)) {
//        task_err("esc write BootInit err");
//        return false;
//    }
//
//    if (!esc_read(connect_reply, 1, blheli.chan)) {
//        task_err("esc read BootInit err");
//        return false;
//    }
//
//    if(connect_reply[0] != 0x30){
//        task_err("esc read ack err");
//        return false;
//    }
//
//    // 03 00 00 F0
//    const uint8_t cmd4[]={0x03, 0x00, 0x00, 0xF0 };
//    if (!esc_write(cmd4, sizeof(cmd4), blheli.chan)) {
//        task_err("esc write BootInit err");
//        return false;
//    }
//
//    // read 256+3
//    if (!esc_read(reply_data, 259, blheli.chan)) {
//        task_err("esc read BootInit err");
//        return false;
//    }
//
//    if(reply_data[258] != 0x30){
//        task_err("esc read ack err");
//        return false;
//    }
//
//
//    esc_keep_alive();
//
//    //FF 00 EB 00 7E E4
//    const uint8_t cmd5[]={0xFF, 0x00, 0xEB, 0x00, 0x7E, 0xE4 };
//    if (!esc_write(cmd5, sizeof(cmd5), blheli.chan)) {
//        task_err("esc write BootInit err");
//        return false;
//    }
//
//    if (!esc_read(connect_reply, 1, blheli.chan)) {
//        task_err("esc read BootInit err");
//        return false;
//    }
//
//    if(connect_reply[0] != 0x30){
//        task_err("esc read ack err");
//        return false;
//    }
//
//    // 03 10 01 3C
//    const uint8_t cmd6[]={0x03, 0x10, 0x01, 0x3C };
//    if (!esc_write(cmd6, sizeof(cmd6), blheli.chan)) {
//        task_err("esc write BootInit err");
//        return false;
//    }
//
//    // read 16+3
//    if (!esc_read(reply_data, 19, blheli.chan)) {
//        task_err("esc read BootInit err");
//        return false;
//    }
//
//    if(reply_data[18] != 0x30){
//        task_err("esc read ack err");
//        return false;
//    }
//
//    esc_keep_alive();
//
//    //FF 00 F7 AC 76 59
//    const uint8_t cmd7[]={0xFF, 0x00, 0xF7, 0xAC, 0x76, 0x59 };
//    if (!esc_write(cmd7, sizeof(cmd7), blheli.chan)) {
//        task_err("esc write BootInit err");
//        return false;
//    }
//
//    if (!esc_read(connect_reply, 1, blheli.chan)) {
//        task_err("esc read BootInit err");
//        return false;
//    }
//
//    if(connect_reply[0] != 0x30){
//        task_err("esc read ack err");
//        return false;
//    }
//
//    // 03 10 01 3C
//    if (!esc_write(cmd6, sizeof(cmd6), blheli.chan)) {
//        task_err("esc write BootInit err");
//        return false;
//    }
//
//    // read 16+3
//    if (!esc_read(reply_data, 19, blheli.chan)) {
//        task_err("esc read BootInit err");
//        return false;
//    }
//
//    if(reply_data[18] != 0x30){
//        task_err("esc read ack err");
//        return false;
//    }
```



#### 按钮

```html
                  <a href="/" class="btn btn-secondary btn-icon-split">
                        <span class="icon text-white-50">
                          <i class="fa fa-user-plus"></i>
                        </span>
                    <span class="text">新用户注册</span>
                  </a>
                                   
                                   <a href="/dmdUser/dmdUserRegister" class="btn btn-facebook btn-block"><i class="fa fa-user-plus"></i>新用户注册</a>
```



#### 折叠标签

```html
    <!-- Nav Item - Pages Collapse Menu -->
    <li class="nav-item active" >
      <a class="nav-link" href="#" data-toggle="collapse" data-target="#collapsePages" aria-expanded="true" aria-controls="collapsePages">
        <i class="fas fa-fw fa-folder"></i>
        <span>地面站</span>
      </a>
      <div id="collapsePages" class="collapse show" aria-labelledby="headingPages" data-parent="#accordionSidebar">
        <div class="bg-white py-2 collapse-inner rounded">
          <a sec:authorize="hasAuthority('/groundStation/files')" th:class="${activeUri=='groundStationStableFileList'?'collapse-item active':'collapse-item'}" th:href="@{/groundStation/files}">地面站正式版</a>
          <a sec:authorize="hasAuthority('/groundStation/testFiles')" th:class="${activeUri=='groundStationTestFileList'?'collapse-item active':'collapse-item'}" th:href="@{/groundStation/testFiles}">地面站测试版</a>
          <a sec:authorize="hasAuthority('/groundStation/users')" th:class="${activeUri=='gslist'?'collapse-item active':'collapse-item'}" th:href="@{/groundStation/users}">地面站用户</a>
        </div>
      </div>
    </li>
```



#### 认证

```
<!--                    <input name = "grant_type" value="password">-->
<!--                    <input name = "client_id" value="client1">-->
<!--                    <input name = "client_secret" value="123456">-->
<!--                    <input name = "scope" value="gs">-->
```



#### python函数中使用静态变量

```python
def static_vars(**kwargs):
    def decorate(func):
        for k in kwargs:
            setattr(func, k, kwargs[k])
        return func

    return decorate

@static_vars(last_index=4)
def control_time_syn(ui_name):
    select_index = cmds.tabLayout(ui_name, query=True, selectTabIndex = True)
    #print select_index
    if select_index == 2 or select_index == 5:

        start = cmds.floatField("Dmd_UAVC_Motion_start_time", query=True, value=True)
        end = cmds.floatField("Dmd_UAVC_Motion_end_time", query=True, value=True)

        cmds.floatField("Dmd_UAVC_Color_start_time_indoor", edit=True, value=start)
        cmds.floatField("Dmd_UAVC_Color_end_time_indoor", edit=True, value=end)

        cmds.floatField("Dmd_UAVC_Color_start_time", edit=True, value=start)
        cmds.floatField("Dmd_UAVC_Color_end_time", edit=True, value=end)

    elif select_index == 3 and control_time_syn.last_index == 2:
        print "color"
        start = cmds.floatField("Dmd_UAVC_Color_start_time", query=True, value=True)
        end = cmds.floatField("Dmd_UAVC_Color_end_time", query=True, value=True)

        cmds.floatField("Dmd_UAVC_Motion_start_time", edit=True, value=start)
        cmds.floatField("Dmd_UAVC_Motion_end_time", edit=True, value=end)

    elif select_index == 3 and control_time_syn.last_index == 5:
        print "indoor_color"
        start = cmds.floatField("Dmd_UAVC_Color_start_time_indoor", query=True, value=True)
        end = cmds.floatField("Dmd_UAVC_Color_end_time_indoor", query=True, value=True)

        cmds.floatField("Dmd_UAVC_Motion_start_time", edit=True, value=start)
        cmds.floatField("Dmd_UAVC_Motion_end_time", edit=True, value=end)
    control_time_syn.last_index = select_index
```

#### 分析日志，并且显示掉线情况

```python
import codecs
import re
import time
from datetime import datetime

def strtime_to_datetime(timestr):
    """将字符串格式的时间 (含毫秒) 转为 datetiem 格式
    :param timestr: {str}'2016-02-25 20:21:04.242'
    :return: {datetime}2016-02-25 20:21:04.242000
    """
    local_datetime = datetime.strptime(timestr, "%Y-%m-%d %H:%M:%S.%f")
    return local_datetime
    
def datetime_to_timestamp(datetime_obj):
    """将本地(local) datetime 格式的时间 (含毫秒) 转为毫秒时间戳
    :param datetime_obj: {datetime}2016-02-25 20:21:04.242000
    :return: 13 位的毫秒时间戳  1456402864242
    """
    local_timestamp = long(time.mktime(datetime_obj.timetuple()) * 1000.0 + datetime_obj.microsecond / 1000.0)
    return local_timestamp

def strtime_to_timestamp(local_timestr):
    """将本地时间 (字符串格式，含毫秒) 转为 13 位整数的毫秒时间戳
    :param local_timestr: {str}'2016-02-25 20:21:04.242'
    :return: 1456402864242
    """
    local_datetime = strtime_to_datetime(local_timestr)
    timestamp = datetime_to_timestamp(local_datetime)
    return timestamp

filepath = cmds.fileDialog2(fileMode=1, caption="读取log", fileFilter="*.log", dialogStyle=2, startingDirectory="")[0]
print filepath
f1 = codecs.open(filepath,'r+')
#f1 = codecs.open(r"F:\Debug\90架地面站(1).log",'r+')
start_time = "2017-01-01 16:02:34.394"
#stime = strtime_to_timestamp(start_time)
#print stime
find_start = False
uav_sum = len(cmds.ls("dmd*", transforms=True))
print "sum uav",uav_sum

for line in f1:
    #print(line)
    debuginfo = line.split("|")
    if len(debuginfo)<3:
        continue
    str_time = debuginfo[1]
    #print time
    #time = "16:02:34.394"
    #print time.strptime("2017-01-01 "+time, '%Y-%m-%d %H:%M:%S.%f')
    if re.search("Play Start",debuginfo[3]):
        start_time = "2017-01-01 "+str_time
        find_start = True
        stime = strtime_to_timestamp(start_time)
        print "find start time",start_time
        
    if find_start:
        tmp_time = strtime_to_timestamp("2017-01-01 "+str_time)
        if tmp_time > stime:
            cur_time = tmp_time - stime
            #print cur_time,"2017-01-01 "+str_time
        else:
            continue
    else:
        continue
    
    cur_time = int(cur_time / 100 + 1 - 50)
    
    if debuginfo[3].startswith("uav"):
        uav_num = (debuginfo[3][3:].split(" "))[0]
        if int(uav_num) > uav_sum:
            print "uav need map",uav_num
            continue
        
        print uav_num,cur_time
        
        if re.search("lost mavlink",debuginfo[3]):
            # set a background color
            cmds.currentTime(cur_time-1, update=False)
            cmds.setAttr("dmd_custom_color"+uav_num+".color", 0, 0, 0, type="float3")
            cmds.setKeyframe("dmd_custom_color"+uav_num, attribute="color")
            # set cur color 
            cmds.currentTime(cur_time, update=False)
            cmds.setAttr("dmd_custom_color"+uav_num+".color", 1, 0, 0, type="float3")
            cmds.setKeyframe("dmd_custom_color"+uav_num, attribute="color")
        
        if re.search("is working",debuginfo[3]):
            # set a background color
            cmds.currentTime(cur_time-1, update=False)
            cmds.setAttr("dmd_custom_color"+uav_num+".color", 1, 0, 0, type="float3")
            cmds.setKeyframe("dmd_custom_color"+uav_num, attribute="color")
            # set cur color 
            cmds.currentTime(cur_time, update=False)
            cmds.setAttr("dmd_custom_color"+uav_num+".color", 0, 0, 0, type="float3")
            cmds.setKeyframe("dmd_custom_color"+uav_num, attribute="color")        
        
f1.close()
```



#### 回调函数

```
from pymel.all import Callback
createButton = cmds.button('yourButton', label='yourButton',  c=Callback(yourFunction, args,args))
```



#### 分割线

```
cmds.separator(height=5, style='in')
```



#### 进度条

```
 	MComputation process_bar;
	process_bar.beginComputation(true /* use progress bar */, true /* interruptable */);
	process_bar.setProgressRange(0, 100);
	process_bar.setProgress(0);
	
	// 打断
		if (process_bar.isInterruptRequested())
		{
			dmd_mpi << "interruption" << endl;
			return MS::kFailure;
		}
		
		//结束
process_bar.endComputation();
```





#### 寻找最新版本

```java
	public String getVersion(){
		File file = new File(filePath);
		File[] tempList = file.listFiles();
		String version = "2017-07-29 182013";

		for (int i = 0; i < tempList.length; i++) {
			if (tempList[i].isFile()) {
				String name = tempList[i].getName();
				String cur_version = name.substring(name.lastIndexOf(".")-17,name.lastIndexOf("."));
				version = version.compareTo(cur_version)>0?version:cur_version;
				logger.debug(cur_version);
			}
		}
		return version;
	}
```



#### 遍历当前目录下所有文件

```java
		// query it from local
		logger.debug(filePath);
		File file = new File(filePath);
		File[] tempList = file.listFiles();
		files = new ArrayList<DramaEditorFile>();

		for (int i = 0; i < tempList.length; i++) {
			if (tempList[i].isFile()) {
				logger.debug(tempList[i].toString());
				DramaEditorFile newFile = new DramaEditorFile(tempList[i].getName());
				String name = tempList[i].getName();
				logger.debug(name.substring(name.lastIndexOf(".")-17,name.lastIndexOf(".")));
				newFile.setVersion(name.substring(name.lastIndexOf(".")-17,name.lastIndexOf(".")));
				// here use my machine num as the download link
				newFile.setUrl("/e6db46911611254470ba501e84ad88a2/"+tempList[i].getName());
				files.add(newFile);
			}
		}
```





#### 已存在对象

```
cmds.objExists('dmd'+str(i+1)):
```



#### 对话框

```
cmds.confirmDialog(title='生成剧本',icon = 'critical',message="场景与剧本帧不同步，自动重置场景帧，请务必手动检查一次")

if not cmds.attributeQuery('drone_type',node = s,exists = True):
            cmds.confirmDialog(title='生成剧本',icon = 'critical',message="飞机类型未设置")
            return
            
confirm = cmds.confirmDialog(title='更新', icon='warning', message="更新前请确定已经保存好场景了",button=['是','否'],defaultButton='否', cancelButton='否',dismissString='否')
    if confirm == "否":
        return
  
            
```

#### 清空脚本编辑器内容

```python
cmds.scriptEditorInfo(ch=True)
import pymel.core as pm
pm.scriptEditorInfo(clearHistory=True)
```



#### dashboard

```
  <!-- Page level plugins -->
  <script src="/vendor/chart.js/Chart.min.js"></script>

  <!-- Page level custom scripts -->
  <script src="/js/demo/chart-area-demo.js"></script>
  <script src="/js/demo/chart-pie-demo.js"></script>
```
