
AVRASM ver. 2.2.7  E:\Github\homework\ECE375\final7\final\final\final.asm Fri Dec 11 15:03:11 2020

[builtin](2): Including file 'D:/Atmel\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m128def.inc'
E:\Github\homework\ECE375\final7\final\final\final.asm(15): Including file 'D:/Atmel\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m128def.inc'
E:\Github\homework\ECE375\final7\final\final\final.asm(27): warning: Register r17 already defined by the .DEF directive
E:\Github\homework\ECE375\final7\final\final\final.asm(29): warning: Register r18 already defined by the .DEF directive
E:\Github\homework\ECE375\final7\final\final\final.asm(610): Including file 'E:\Github\homework\ECE375\final7\final\final\LCDDriver.asm'
E:\Github\homework\ECE375\final7\final\final\LCDDriver.asm(38): warning: Register r17 already defined by the .DEF directive
E:\Github\homework\ECE375\final7\final\final\final.asm(610): 'E:\Github\homework\ECE375\final7\final\final\LCDDriver.asm' included form here
E:\Github\homework\ECE375\final7\final\final\LCDDriver.asm(39): warning: Register r18 already defined by the .DEF directive
E:\Github\homework\ECE375\final7\final\final\final.asm(610): 'E:\Github\homework\ECE375\final7\final\final\LCDDriver.asm' included form here
E:\Github\homework\ECE375\final7\final\final\LCDDriver.asm(40): warning: Register r19 already defined by the .DEF directive
E:\Github\homework\ECE375\final7\final\final\final.asm(610): 'E:\Github\homework\ECE375\final7\final\final\LCDDriver.asm' included form here
E:\Github\homework\ECE375\final7\final\final\LCDDriver.asm(41): warning: Register r20 already defined by the .DEF directive
E:\Github\homework\ECE375\final7\final\final\final.asm(610): 'E:\Github\homework\ECE375\final7\final\final\LCDDriver.asm' included form here
E:\Github\homework\ECE375\final7\final\final\LCDDriver.asm(42): warning: Register r21 already defined by the .DEF directive
E:\Github\homework\ECE375\final7\final\final\final.asm(610): 'E:\Github\homework\ECE375\final7\final\final\LCDDriver.asm' included form here
[builtin](2): Including file 'D:/Atmel\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m128def.inc'
E:\Github\homework\ECE375\final7\final\final\final.asm(15): Including file 'D:/Atmel\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m128def.inc'
E:\Github\homework\ECE375\final7\final\final\final.asm(610): Including file 'E:\Github\homework\ECE375\final7\final\final\LCDDriver.asm'
                                 
                                 ;***********************************************************
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #define _M128DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega128
                                 #pragma AVRPART ADMIN PART_NAME ATmega128
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x97
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UCSR1C	= 0x9d	; MEMORY MAPPED
                                 .equ	UDR1	= 0x9c	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0x9b	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0x9a	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0x98	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0x99	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0x95	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0x90	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x8c	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x8b	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x8a	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x88	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x89	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x86	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x87	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x84	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x85	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x82	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x83	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x80	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x81	; MEMORY MAPPED
                                 .equ	ETIMSK	= 0x7d	; MEMORY MAPPED
                                 .equ	ETIFR	= 0x7c	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x7a	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x78	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x79	; MEMORY MAPPED
                                 .equ	TWCR	= 0x74	; MEMORY MAPPED
                                 .equ	TWDR	= 0x73	; MEMORY MAPPED
                                 .equ	TWAR	= 0x72	; MEMORY MAPPED
                                 .equ	TWSR	= 0x71	; MEMORY MAPPED
                                 .equ	TWBR	= 0x70	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x6f	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x6d	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x6c	; MEMORY MAPPED
                                 .equ	EICRA	= 0x6a	; MEMORY MAPPED
                                 .equ	SPMCSR	= 0x68	; MEMORY MAPPED
                                 .equ	PORTG	= 0x65	; MEMORY MAPPED
                                 .equ	DDRG	= 0x64	; MEMORY MAPPED
                                 .equ	PING	= 0x63	; MEMORY MAPPED
                                 .equ	PORTF	= 0x62	; MEMORY MAPPED
                                 .equ	DDRF	= 0x61	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	XDIV	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	EICRB	= 0x3a
                                 .equ	EIMSK	= 0x39
                                 .equ	EIFR	= 0x38
                                 .equ	TIMSK	= 0x37
                                 .equ	TIFR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OCR0	= 0x31
                                 .equ	ASSR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	OCDR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	SFIOR	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR0	= 0x0c
                                 .equ	UCSR0A	= 0x0b
                                 .equ	UCSR0B	= 0x0a
                                 .equ	UBRR0L	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	PORTE	= 0x03
                                 .equ	DDRE	= 0x02
                                 .equ	PINE	= 0x01
                                 .equ	PINF	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR00	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR01	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR02	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR03	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR04	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR05	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR06	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR07	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	UCSZ2	= UCSZ02	; For compatibility
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL0	= 6	; USART Mode Select
                                 
                                 ; UBRR0H - USART Baud Rate Register Hight Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR10	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR11	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR12	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR13	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR14	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR15	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR16	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR17	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL1	= 6	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register Hight Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	SM2	= 2	; Sleep Mode Select
                                 .equ	SM0	= 3	; Sleep Mode Select
                                 .equ	SM1	= 4	; Sleep Mode Select
                                 .equ	SE	= 5	; Sleep Enable
                                 .equ	SRW10	= 6	; External SRAM Wait State Select
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW11	= 1	; Wait state select bit upper page
                                 .equ	SRW00	= 2	; Wait state select bit lower page
                                 .equ	SRW01	= 3	; Wait state select bit lower page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value
                                 .equ	CAL1	= 1	; Oscillator Calibration Value
                                 .equ	CAL2	= 2	; Oscillator Calibration Value
                                 .equ	CAL3	= 3	; Oscillator Calibration Value
                                 .equ	CAL4	= 4	; Oscillator Calibration Value
                                 .equ	CAL5	= 5	; Oscillator Calibration Value
                                 .equ	CAL6	= 6	; Oscillator Calibration Value
                                 .equ	CAL7	= 7	; Oscillator Calibration Value
                                 
                                 ; XDIV - XTAL Divide Control Register
                                 .equ	XDIV0	= 0	; XTAl Divide Select Bit 0
                                 .equ	XDIV1	= 1	; XTAl Divide Select Bit 1
                                 .equ	XDIV2	= 2	; XTAl Divide Select Bit 2
                                 .equ	XDIV3	= 3	; XTAl Divide Select Bit 3
                                 .equ	XDIV4	= 4	; XTAl Divide Select Bit 4
                                 .equ	XDIV5	= 5	; XTAl Divide Select Bit 5
                                 .equ	XDIV6	= 6	; XTAl Divide Select Bit 6
                                 .equ	XDIVEN	= 7	; XTAL Divide Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** MISC *************************
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR321	= 0	; Prescaler Reset Timer/Counter3, Timer/Counter2, and Timer/Counter1
                                 .equ	PSR1	= PSR321	; For compatibility
                                 .equ	PSR2	= PSR321	; For compatibility
                                 .equ	PSR3	= PSR321	; For compatibility
                                 .equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 .equ	PUD	= 2	; Pull Up Disable
                                 ;.equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	GICR	= EIMSK	; For compatibility
                                 .equ	GIMSK	= EIMSK	; For compatibility
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	GIFR	= EIFR	; For compatibility
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 0
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; ASSR - Asynchronus Status Register
                                 .equ	TCR0UB	= 0	; Timer/Counter Control Register 0 Update Busy
                                 .equ	OCR0UB	= 1	; Output Compare register 0 Busy
                                 .equ	TCN0UB	= 2	; Timer/Counter0 Update Busy
                                 .equ	AS0	= 3	; Asynchronus Timer/Counter 0
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE1C	= 0	; Timer/Counter 1, Output Compare Match C Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF1C	= 0	; Timer/Counter 1, Output Compare C Match Flag
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare for channel C
                                 .equ	FOC1B	= 6	; Force Output Compare for channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for channel A
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TCCR2 - Timer/Counter Control Register
                                 .equ	CS20	= 0	; Clock Select
                                 .equ	CS21	= 1	; Clock Select
                                 .equ	CS22	= 2	; Clock Select
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Match Output Mode
                                 .equ	COM21	= 5	; Compare Match Output Mode
                                 .equ	WGM20	= 6	; Wafeform Generation Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter Register
                                 .equ	TCNT2_0	= 0	; Timer/Counter Register Bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter Register Bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter Register Bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter Register Bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter Register Bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter Register Bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter Register Bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter Register Bit 7
                                 
                                 ; OCR2 - Output Compare Register
                                 .equ	OCR2_0	= 0	; Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Output Compare Register Bit 7
                                 
                                 ; TIMSK - 
                                 .equ	TOIE2	= 6	; 
                                 .equ	OCIE2	= 7	; 
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE3C	= 1	; Timer/Counter3, Output Compare Match Interrupt Enable
                                 .equ	TOIE3	= 2	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3B	= 3	; Timer/Counter3 Output CompareB Match Interrupt Enable
                                 .equ	OCIE3A	= 4	; Timer/Counter3 Output CompareA Match Interrupt Enable
                                 .equ	TICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF3C	= 1	; Timer/Counter3 Output Compare C Match Flag
                                 .equ	TOV3	= 2	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3B	= 3	; Output Compare Flag 1B
                                 .equ	OCF3A	= 4	; Output Compare Flag 1A
                                 .equ	ICF3	= 5	; Input Capture Flag 1
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	PSR1	= PSR321	; For compatibility
                                 ;.equ	PSR2	= PSR321	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM30	= WGM30	; For compatibility
                                 .equ	WGM31	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM31	= WGM31	; For compatibility
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Comparet Ouput Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 3A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Clock Select 3 bit 0
                                 .equ	CS31	= 1	; Clock Select 3 bit 1
                                 .equ	CS32	= 2	; Clock Select3 bit 2
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	CTC30	= WGM32	; For compatibility
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	CTC31	= WGM33	; For compatibility
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3  Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare for channel C
                                 .equ	FOC3B	= 6	; Force Output Compare for channel B
                                 .equ	FOC3A	= 7	; Force Output Compare for channel A
                                 
                                 ; TCNT3L - Timer/Counter3 Low Byte
                                 .equ	TCN3L0	= 0	; Timer/Counter 3 bit 0
                                 .equ	TCN3L1	= 1	; Timer/Counter 3 bit 1
                                 .equ	TCN3L2	= 2	; Timer/Counter 3 bit 2
                                 .equ	TCN3L3	= 3	; Timer/Counter 3 bit 3
                                 .equ	TCN3L4	= 4	; Timer/Counter 3 bit 4
                                 .equ	TCN3L5	= 5	; Timer/Counter 3 bit 5
                                 .equ	TCN3L6	= 6	; Timer/Counter 3 bit 6
                                 .equ	TCN3L7	= 7	; Timer/Counter 3 bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	WDTON	= 0	; Watchdog timer always on
                                 .equ	M103C	= 1	; ATmega103 compatibility mode
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0xffff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 4096
                                 .equ	RAMEND	= 0x10ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 131072
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 4096
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xf000
                                 .equ	NRWW_STOP_ADDR	= 0xffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xefff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0xfe00
                                 .equ	SECONDBOOTSTART	= 0xfc00
                                 .equ	THIRDBOOTSTART	= 0xf800
                                 .equ	FOURTHBOOTSTART	= 0xf000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	OC2addr	= 0x0012	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0014	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0016	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0018	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x001a	; Timer/Counter Compare Match B
                                 .equ	OVF1addr	= 0x001c	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x001e	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0020	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0024	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0026	; USART0 Data Register Empty
                                 .equ	UTXC0addr	= 0x0028	; USART0, Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	OC1Caddr	= 0x0030	; Timer/Counter1 Compare Match C
                                 .equ	ICP3addr	= 0x0032	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0034	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0036	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0038	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x003a	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x003c	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x003e	; USART1, Data Register Empty
                                 .equ	UTXC1addr	= 0x0040	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x0042	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0044	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 70	; size in words
                                 
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;*
                                 ;*	Enter Name of file here
                                 ;*  Boyuan Gao
                                 ;*	Enter the description of the program here
                                 ;*
                                 ;*	This is the skeleton file for the ECE 375 final project
                                 ;*
                                 ;***********************************************************
                                 ;*
                                 ;*	 Author: Enter your name
                                 ;*	   Date: Enter Date
                                 ;*
                                 ;***********************************************************
                                 .include "m128def.inc"			; Include definition file
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 ;***********************************************************
                                 ;*	Internal Register Definitions and Constants
                                 ;*	(feel free to edit these or add others)
                                 ;***********************************************************
                                 .def	rlo = r0				; Low byte of MUL result
                                 .def	rhi = r1				; High byte of MUL result
                                 .def	zero = r2				; Zero register, set to zero in INIT, useful for calculations
                                 .def	bytel = r3				; A variable
                                 .def	byteh = r4				; Another variable
                                 .def	mpr = r16				; Multipurpose register 
                                 .def	byte_L = r17			; Outer Loop Counter
                                 .def	morse = r17			; Outer Loop Counter
                                 .def	byte_H = r18			; Inner Loop Counter
                                 .def	len = r18			; Inner Loop Counter
                                 .def	dataptr = r19			; data ptr
                                 .def	input_counter = r20		; data ptr
                                 .def    char_index = r24        ; the input char index
                                 .def    temp = r25        		; some temp value
                                 .def    cur_index = r21
                                 ;***********************************************************
                                 ;*	Data segment variables
                                 ;*	(feel free to edit these or add others)
                                 ;***********************************************************
                                 .dseg
                                 .org	$0200						; data memory allocation for operands
000200                           operand1:		.byte 2				; allocate 2 bytes for a variable named operand1
                                 
                                 ; Important Reminder:
                                 ; The LCD driver expects its display data to be arranged as follows:
                                 ; - Line 1 data is in address space $0100-$010F
                                 ; - Line 2 data is in address space $0110-$010F
                                 
                                 ;***********************************************************
                                 ;*	Start of Code Segment
                                 ;***********************************************************
                                 .cseg							; Beginning of code segment
                                 ;-----------------------------------------------------------
                                 ; Interrupt Vectors
                                 ;-----------------------------------------------------------
                                 .org	$0000					; Beginning of IVs
000000 c045                      		rjmp  INIT				; Reset interrupt
                                 
                                 ;timer1 interrupt
                                 .org	$0018
000018 c133                      		rjmp	TIM1INT
000019 9518                      		RETI
                                 ;timer1 interrupt
                                 .org	$001C
00001c c12f                      		rjmp	TIM1INT
00001d 9518                      		RETI
                                 
                                 .org	$0046					; End of Interrupt Vectors
                                 ;-----------------------------------------------------------
                                 ; Program Initialization
                                 ;-----------------------------------------------------------
                                 INIT:	; The initialization routine
                                 	; Initialize Stack Pointer
000046 ef0f                      	ldi	mpr, low(RAMEND)
000047 bf0d                      	out	SPL, mpr        
000048 e100                      	ldi	mpr, high(RAMEND)
000049 bf0e                      	out	SPH, mpr  
                                 
00004a 2422                      	clr  zero
                                 	; To do
                                 	; your code goes in this area
                                 	; set the port B Output High Source
00004b ef0f                      	ldi mpr,$FF
00004c bb07                      	out DDRB,mpr
                                 	; set all PB low,leds disable
00004d e000                      	ldi mpr,$00
00004e bb08                      	out PORTB,mpr
                                 
                                 	; set the port D input and pull-up
00004f e000                      	ldi mpr,$00
000050 bb01                      	out DDRD,mpr
000051 ef0f                      	ldi mpr,$FF
000052 bb02                      	out PORTD,mpr
                                 	;ldi mpr,$02
                                 	;out SFIOR,mpr
                                 
000053 94f8                      	cli
                                 	;init the Timer count 1 CTC mode
000054 e000                      	ldi mpr,$00
000055 bd0f                      	out TCCR1A,mpr
                                 	;clk/256
000056 e004                      	ldi mpr,$04
000057 bd0e                      	out TCCR1B,mpr
                                 	;disable interrupt
000058 e000                      	ldi mpr,$00
000059 bf07                      	out TIMSK,mpr
                                 	; clean interrupt flag
00005a ef0f                      	ldi mpr,$FF
00005b bf06                      	out TIFR,mpr
                                 	;set the counter
00005c e020                          ldi byte_H,$00
00005d e010                      	ldi byte_L,$00
                                 	;ldi byte_H,30
                                 	;ldi byte_L,D4
00005e bd2d                      	out TCNT1H,byte_H
00005f bd1c                      	out TCNT1L,byte_L
                                 	
000060 d128                      	rcall LCDInit			; initialize lcd display
000061 d189                      	rcall LCDClr			; clear lcd display in case it is not done in initialization
                                 
                                 ;-----------------------------------------------------------
                                 ; Main procedure
                                 ;-----------------------------------------------------------
                                 MAIN:
                                 	; more code
                                 	; you will probably have an infinite loop in your code that handles input from the user
                                 	; show welcome info
000062 d0aa                      	rcall WELCOME
                                 
                                 ;***********************************************************
                                 ;*	wait PD0 to start
                                 ;***********************************************************
                                 	; check input key
                                 WAITPD0START:
                                 	; debouncing 8ms
000063 d0d8                      	rcall KeyWait
                                 	; stores pind input to multipurpose register
000064 b300                      	in	mpr, PIND       
                                 	; check if PD0 has been pressed
000065 3f0e                      	cpi	mpr, 0b11111110	
                                 	; if not, continue to WAITPD0
000066 f7e1                      	brne WAITPD0START
                                 	;if PD0 press,go on,show tip3 and A
000067 e041                      	ldi input_counter ,1
000068 e080                      	ldi char_index ,0
000069 d181                      	rcall LCDClr	
                                 	;write the value A
00006a d0c5                      	rcall WriteLCDAddr
                                 	;show it
00006b d0b8                      	rcall SHOWTIP3
00006c d0b5                      	rcall SHOWINPUT
                                 
                                 ;***********************************************************
                                 ;*	check input key and show in LCD
                                 ;***********************************************************
                                 CHECKINPUT:
                                 	; debouncing 8ms
00006d d0ce                      	rcall KeyWait
                                 	; stores pind input to multipurpose register
00006e b300                      	in	mpr, PIND      
                                 
                                 	; check if PD7 has been pressed
00006f 370f                      	cpi	mpr, 0b01111111	
000070 f451                      	brne CHECKPD6
                                 	;if PD7 press,show last char
000071 958a                      	dec char_index
000072 3f8f                      	CPI char_index,255
000073 f019                      	BREQ RESET1
000074 d0bb                      	rcall WriteLCDAddr
000075 d0ac                      	rcall SHOWINPUT
000076 cff6                      	rjmp CHECKINPUT
                                 	
                                 RESET1:
000077 e189                      	ldi char_index,25
000078 d0b7                      	rcall WriteLCDAddr
000079 d0a8                      	rcall SHOWINPUT
00007a cff2                      	rjmp CHECKINPUT
                                 
                                 CHECKPD6:
                                 	; check if PD6 has been pressed
00007b 3b0f                      	cpi	mpr, 0b10111111	
00007c f451                      	brne CHECKPD0
                                 	;if PD6 press
00007d 9583                      	inc char_index
00007e 318a                      	CPI char_index,26
00007f f019                      	BREQ RESET2
000080 d0af                      	rcall WriteLCDAddr
000081 d0a0                      	rcall SHOWINPUT
000082 cfea                      	rjmp CHECKINPUT
                                 	
                                 RESET2:
000083 e080                      	ldi char_index,0
000084 d0ab                      	rcall WriteLCDAddr
000085 d09c                      	rcall SHOWINPUT
000086 cfe6                      	rjmp CHECKINPUT
                                 
                                 CHECKPD0:
                                 	; check if PD0 has been pressed
000087 3f0e                      	cpi	mpr, 0b11111110	
000088 f439                      	brne CHECKPD4
                                 	;if PD0 press,next char
000089 9543                      	inc input_counter
00008a 3141                      	CPI input_counter,17
00008b f049                      	BREQ PRETRANSMIT
00008c e080                      	ldi char_index,0
00008d d0a2                      	rcall WriteLCDAddr
00008e d093                      	rcall SHOWINPUT
00008f cfdd                      	rjmp CHECKINPUT
                                 
                                 CHECKPD4:
                                 	; check if PD4 has been pressed
000090 3e0f                      	cpi	mpr, 0b11101111	
000091 f6d9                      	brne CHECKINPUT
                                 	;if PD4 press,transmit start
000092 9543                      	inc input_counter
000093 940c 0099                 	jmp TRANSMIT
                                 
                                 PRETRANSMIT:
                                 	;the counter is 17 need -1
                                 	;dec input_counter
000095 940c 0099                 	jmp TRANSMIT
                                 
                                 TRANSMITEND1:
000097 940c 0046                 	jmp INIT
                                 
                                 ;***********************************************************
                                 ;*	start transmit
                                 ;***********************************************************
                                 TRANSMIT:
                                 	;PB4 = LED4 enable
000099 e100                      	ldi mpr,0b00010000
00009a bb08                      	out PORTB,mpr
00009b e050                      	ldi cur_index,0
                                 ;***********************************************************
                                 ;*	first get input char,then get the map morse bits
                                 ;***********************************************************
                                 GETCHAR:
                                 	; loop
                                 	; read from LCDLn2Addr to get char
00009c e0f1                      	ldi ZH, high(LCDLn2Addr)
00009d e1e0                      	ldi ZL, low(LCDLn2Addr)
00009e 0fe5                      	add ZL,cur_index
00009f 9553                      	inc cur_index
0000a0 1754                      	cp cur_index,input_counter
                                 	; end 
0000a1 f3a9                      	breq TRANSMITEND1
                                 
0000a2 9101                      	ld mpr,Z+
0000a3 5401                      	subi mpr,$41
                                 
                                 	;mov ptr to the pos in morse
0000a4 e0f2                      	ldi ZH, high(MorseBits<<1)
0000a5 edee                      	ldi ZL, low(MorseBits<<1)
                                 	;ldi r22,$FE
                                 	;ldi r25,2
                                 DD:
                                 	;add r22,r25
                                 	;dec mpr
                                 	;brne DD
                                 	;mul r22,mpr
0000a6 0fe0                      	add zl,mpr
0000a7 0fe0                      	add zl,mpr
0000a8 f010                      	brcs ADDZH 
0000a9 940c 00ac                 	jmp LOADBITS
                                 
                                 ADDZH:
0000ab 95f3                      	inc zh
                                 
                                 LOADBITS:
0000ac 9115                      	lpm morse,Z+
                                 	;dec input_counter
                                 	;brne SEARCH1BIT
                                 	;jmp TRANSMITEND
                                 ;***********************************************************
                                 ;*	find the first 1 bit in morse bits
                                 ;***********************************************************
                                 SEARCH1BIT:
                                 	;first 8 bits to move
0000ad e028                      	ldi r18,8
                                 FIRST:
0000ae 9488                      	CLC
0000af 1f11                      	rol morse
                                 	;find the first 1
0000b0 f058                      	BRCS PRETRANSMITLOOP1
                                 	;not 1 ,check left bits
0000b1 952a                      	dec r18
0000b2 f7d9                      	brne FIRST
                                 	; we cant find first 0 in first bytes
                                 	; so we search next bit
0000b3 e028                      	ldi r18,8
0000b4 9115                      	lpm morse,Z+
                                 	;dec r22
                                 SECOND:
0000b5 9488                      	CLC
0000b6 1f11                      	rol morse
                                 	;find the first 1
0000b7 f060                      	BRCS PRETRANSMITLOOP2
                                 	;not 1 ,check left bits
0000b8 952a                      	dec r18
0000b9 f7d9                      	brne SECOND
                                 	;it couldnt here
0000ba 940c 0046                 	jmp INIT
                                 
                                 PRETRANSMITLOOP1:
                                 	;move back
0000bc 9517                      	ror morse
0000bd d00b                      	rcall TRANSMITLOOP
0000be e028                      	ldi len,8
0000bf 9115                      	lpm morse,Z+
0000c0 d008                      	rcall TRANSMITLOOP
0000c1 d019                      	rcall LEWAIT
                                 	;ldi mpr,8
                                 	;add len,mpr
                                 	;jmp TRANSMITLOOP
0000c2 940c 009c                 	jmp GETCHAR
                                 
                                 PRETRANSMITLOOP2:
                                 	;move back
0000c4 9517                      	ror morse
0000c5 d003                      	rcall TRANSMITLOOP
0000c6 d014                      	rcall LEWAIT
0000c7 940c 009c                 	jmp GETCHAR
                                 	;jmp TRANSMITLOOP
                                 ;***********************************************************
                                 ;*	start to transmit every bit
                                 ;***********************************************************
                                 TRANSMITLOOP:
0000c9 9488                      	CLC
0000ca 1f11                      	ROL morse;,len
                                 	;if the bit is 1 jump
0000cb f048                      	BRCS LEDONWAIT
                                 	;BRTS LEDONWAIT
                                 LEDOFFWAIT:
                                 	;the bit is zero
                                 	; make it off
0000cc e100                      	ldi mpr,0b00010000
0000cd bb08                      	out PORTB,mpr
0000ce d012                      	rcall TIMERWAIT
                                 	;cpi len,8
                                 	;BREQ LOADNEXTBYTE
                                 RELOOP:
0000cf 952a                      	dec len
0000d0 f7c1                      	brne TRANSMITLOOP
                                 	;goto next char
0000d1 9508                      	ret
                                 	;jmp LEWAIT
                                 
                                 LOADNEXTBYTE:
0000d2 9115                      	lpm morse,Z+
0000d3 940c 00cf                 	jmp RELOOP
                                 
                                 LEDONWAIT:
                                 	; make it light
0000d5 ef00                      	ldi mpr,0b11110000
0000d6 bb08                      	out PORTB,mpr
0000d7 d009                      	rcall TIMERWAIT
                                 	;cpi len,8
                                 	;BREQ LOADNEXTBYTE
0000d8 952a                      	dec len
0000d9 f779                      	brne TRANSMITLOOP
                                 	;goto next char
0000da 9508                      	ret
                                 	;jmp LEWAIT
                                 
                                 ;***********************************************************
                                 ;*	wait between letters
                                 ;***********************************************************
                                 LEWAIT:
0000db e100                      	ldi mpr,0b00010000
0000dc bb08                      	out PORTB,mpr
0000dd d003                      	rcall TIMERWAIT
0000de d002                      	rcall TIMERWAIT
0000df d001                      	rcall TIMERWAIT
0000e0 9508                      	ret
                                 	;jmp GETCHAR
                                 
                                 ;***********************************************************
                                 ;*	Timer wait func
                                 ;***********************************************************
                                 TIMERWAIT:
0000e1 9508                      	ret
0000e2 933f                      	push r19
0000e3 93ff                      	push ZH
0000e4 93ef                      	push ZL
0000e5 930f                      	push r16
0000e6 932f                      	push byte_H
0000e7 931f                      	push byte_L
                                 	; set r19
0000e8 e031                      	ldi r19,1
                                 	;disable all
0000e9 94f8                      	cli
0000ea e031                      	ldi r19,1
                                 	;init the Timer1 normal mode
0000eb e000                      	ldi mpr,$00
0000ec bd0f                      	out TCCR1A,mpr
                                 	;clk/256
0000ed e004                      	ldi mpr,$04
0000ee bd0e                      	out TCCR1B,mpr
                                 	; clean interrupt flag
0000ef ef0f                      	ldi mpr,$FF
0000f0 bf06                      	out TIFR,mpr
                                 	;set the counter
0000f1 e0f2                      	ldi ZH, high(UserMode<<1)
0000f2 e9ee                      	ldi ZL, low(UserMode<<1) 
0000f3 9104                      	lpm r16, Z	
0000f4 3001                      	cpi r16,1
0000f5 f089                      	breq LOADCOUNTER1
0000f6 ee27                      	ldi byte_H,$E7
0000f7 e915                      	ldi byte_L,$95
0000f8 e000                      LC:	ldi mpr,0
0000f9 bd2d                      	out TCNT1H,byte_H
0000fa bd1c                      	out TCNT1L,byte_L
                                 	;open intrrupt
0000fb e004                      	ldi mpr,0b00000100	
0000fc bf07                      	out TIMSK,mpr
                                 	;enable all
0000fd 9478                      	sei
                                 WAITEND1:
0000fe 3030                      	cpi r19,0
0000ff f7f1                      	brne WAITEND1
                                 	;wait end,go on next bit
000100 911f                      	pop byte_L
000101 912f                      	pop byte_H
000102 910f                      	pop r16
000103 91ef                      	pop ZL
000104 91ff                      	pop ZH
000105 913f                      	pop r19
000106 9508                      	ret
                                 
                                 LOADCOUNTER1:
000107 e02b                      	ldi byte_H,$0B
000108 ed1b                      	ldi byte_L,$DB
000109 940c 00f8                 	jmp LC
                                 
                                 TRANSMITEND:
00010b 940c 0046                 	jmp INIT
                                 	
                                 ;***********************************************************
                                 ;*	Procedures and Subroutines
                                 ;***********************************************************
                                 ; your code can go here as well
                                 
                                 ;***********************************************************
                                 ;*	show welcome info
                                 ;***********************************************************
                                 WELCOME:
00010d d0dd                      		rcall LCDClr		; Clear anything already on the screen
                                 		
                                 		; Move Tip1 from Program Memory to Data Memory
                                 		; Initialize Z-pointer
00010e e0f2                      		ldi ZH, high(Tip1<<1)
00010f eae0                      		ldi ZL, low(Tip1<<1) 
                                 		; Initialize y pointer
000110 e0c0                      		ldi	YL, low(LCDLn1Addr) 
000111 e0d1                      		ldi	YH, high(LCDLn1Addr)
                                 		; 8 bytes to show
000112 e078                      		ldi	r23, 8		
                                 
                                 LINE1:
                                 		; Load constant from Program
000113 9105                      		lpm r16, Z+		
                                 		; Store constant to one past the address pointed to by Y	
000114 9309                      		st  Y+, r16			
                                 		; Decrement Read Counter
000115 957a                      		dec	r23	
                                 		; Return back to the start of LINE1 if zero flag is 0
000116 f7e1                      		brne LINE1
                                 		
                                 		; Move string2 from Program Memory to Data Memory
                                 		; Initialize Z-pointer
000117 e0f2                      		ldi ZH, high(Tip2<<1)
000118 eae8                      		ldi ZL, low(Tip2<<1)
                                 		; Initialize y-pointer
000119 e1c0                      		ldi	YL, low(LCDLn2Addr) 
00011a e0d1                      		ldi	YH, high(LCDLn2Addr)
                                 		; 16 bytes to show
00011b e170                      		ldi	r23, 16
                                 
                                 LINE2:
                                 		; Load constant from Program
00011c 9105                      		lpm r16, Z+	
                                 		; Store constant to one past the address pointed to by Y		
00011d 9309                      		st  Y+, r16	
                                 		; Decrement Read Counter		
00011e 957a                      		dec	r23		
                                 		; Return back to the start of LINE1 if zero flag is 0	
00011f f7e1                      		brne LINE2		
                                 
                                 		; Write new values to lcd
000120 d0a7                      		rcall LCDWrite	
                                 		; End a function with RET
000121 9508                      		ret
                                 		
                                 SHOWINPUT:
                                 		; Write new values to lcd
000122 d0a5                      		rcall LCDWrite	
                                 		; End a function with RET
000123 9508                      		ret
                                 
                                 ;***********************************************************
                                 ;*	show input info and input char
                                 ;***********************************************************
                                 ;use for show tip3 string
                                 SHOWTIP3:
000124 937f                      		push r23
                                 		; Initialize Z-pointer
000125 e0f2                      		ldi ZH, high(Tip3<<1)
000126 ebe8                      		ldi ZL, low(Tip3<<1) 
                                 		; Initialize y pointer
000127 e0c0                      		ldi	YL, low(LCDLn1Addr) 
000128 e0d1                      		ldi	YH, high(LCDLn1Addr)
                                 		; 8 bytes to show
000129 e07b                      		ldi		r23, 11		
                                 
                                 SHOWTIP3L:
                                 		; Load constant from Program
00012a 9105                      		lpm r16, Z+		
                                 		; Store constant to one past the address pointed to by Y	
00012b 9309                      		st  Y+, r16			
                                 		; Decrement Read Counter
00012c 957a                      		dec	 r23	
                                 		; Return back to the start of LINE1 if zero flag is 0
00012d f7e1                      		brne SHOWTIP3L
00012e 917f                      		pop r23
00012f 9508                      		ret
                                 		
                                 WriteLCDAddr:
                                 		;write cur char in to the LCDLn2Addr,then show it
                                 		;first jump to the addr
                                 		; Initialize y pointer to address of first line of LCD
000130 e0d1                      		ldi		YH, high(LCDLn2Addr)	
000131 e1c0                      		ldi		YL, low(LCDLn2Addr)
000132 2f04                      		mov		mpr, input_counter
                                 		; Initialize counter to length of first string
                                 CHECK:
000133 950a                      		dec		mpr
000134 f421                      		brne	MP
                                 		; at the next char pos
000135 e471                      		ldi		r23, $41
000136 0f78                      		add		r23,char_index
000137 8378                      		st      Y,r23
000138 9508                      		ret
                                 MP:
000139 9179                      		ld r23,Y+
00013a 940c 0133                 		jmp CHECK
                                 		;move point
                                 
                                 ;*******************************************************
                                 ;* Func:	key wait about 8ms
                                 ;* Desc:	A wait loop that is 10 + 159*wait cycles or
                                 ;*			roughly wait*10us.  Just initialize wait
                                 ;*			for the specific amount of time in 10us 
                                 ;*			intervals.
                                 ;*******************************************************
00013c 930f                      KeyWait:push	mpr				; Save mpr
00013d 931f                      		push    r17
00013e 932f                      		push	r18
00013f e021                      		ldi     r18,1
000140 ec18                      Wait4:	ldi     r17,200
000141 e409                      Wait1:	ldi		mpr, $49		; Load with a 10us value
000142 950a                      Wait2:	dec		mpr				; Inner Wait Loop
000143 f7f1                      		brne	Wait2
000144 951a                      		dec		r17				; Outer Wait Loop
000145 f7d9                      		brne	Wait1
000146 952a                      		dec		r18				; Outer Wait Loop
000147 f7c1                      		brne	Wait4
000148 912f                      		pop     r18
000149 911f                      		pop     r17
00014a 910f                      		pop		mpr				; Restore mpr
00014b 9508                      		ret						; Return from Wait Function		
                                 
                                 TIM1INT:
                                 		;make r19 2
00014c e030                      		ldi r19,0
                                 		;disable intrrupt
00014d 94f8                      		CLI
00014e 9508                      		ret
                                 
                                 ;***end of your code***end of your code***end of your code***end of your code***end of your code***
                                 ;******************************* Do not change below this point************************************
                                 ;******************************* Do not change below this point************************************
                                 ;******************************* Do not change below this point************************************
                                 
                                 
                                 ;***********************************************************
                                 ;*	Stored Program Data
                                 ;***********************************************************
                                 
                                 ; Contents of program memory will be changed during testing
                                 ; The label names are not changed
                                 
                                 ; If UserMode is 0x01, then one unit of time is 1 second
00014f 0001                      UserMode:	.DB	0x01, 0x00
                                 ; You can ignore the second byte (it's only included so that there is an even number of bytes)
                                 
                                 ; If UserMode is 0x00, then one unit of time is 200 milliseconds
                                 ; This would look like the following:
                                 ;UserMode:	.DB	0x00, 0x00
                                 ; (again, ignore the second byte)
                                 
                                 ; UserMode will always be set to either 0x00 or 0x01
000150 6557
000151 636c
000152 6d6f
000153 2165                      Tip1:       .DB	"Welcome!"	
000154 6c50
000155 6165
000156 6573
000157 7020
000158 6572
000159 7373
00015a 5020
00015b 3044                      Tip2:       .DB	"Please press PD0"
00015c 6e45
00015d 6574
00015e 2072
00015f 6f77
000160 6472
E:\Github\homework\ECE375\final7\final\final\final.asm(603): warning: .cseg .db misalignment - padding zero byte
000161 003a                      Tip3:       .DB	"Enter word:"	
000162 4241
000163 4443
000164 4645
000165 4847
000166 4a49
000167 4c4b
000168 4e4d
000169 504f
00016a 5251
00016b 5453
00016c 5655
00016d 5857
00016e 5a59                      Chars:		.DB	"ABCDEFGHIJKLMNOPQRSTUVWXYZ"	
00016f 1700
000170 d501
000171 5d07
000172 7500
000173 0100
000174 5d01
000175 dd01
000176 5500
000177 0500
000178 7717
000179 d701
00017a 7501
00017b 7700
00017c 1d00
00017d 7707
00017e dd05
00017f d71d
000180 5d00
000181 1500
000182 0700
000183 5700
000184 5701
000185 7701
000186 5707
000187 771d
000188 7507                      MorseBits:		.DB	0x00,0x17,0x01,0xD5,0x07,0x5D,0x00,0x75,0x00,0x01,0x01,0x5D,0x01,0xDD,0x00,0x55,0x00,0x05,0x17,0x77,0x01,0xD7,0x01,0x75,0x00,0x77,0x00,0x1D,0x07,0x77,0x05,0xDD,0x1D,0xD7,0x00,0x5D,0x00,0x15,0x00,0x07,0x00,0x57,0x01,0x57,0x01,0x77,0x07,0x57                                 ,0x1D,0x77,0x07,0x75
                                 
                                 ;***********************************************************
                                 ;*	Additional Program Includes
                                 ;***********************************************************
                                 
                                 ;*
                                 ;*	LCDDriver.asm	-	V2.0
                                 ;*
                                 ;*	Contains the neccessary functions to display text to a
                                 ;*	2 x 16 character LCD Display.  Additional functions
                                 ;*	include a conversion routine from an unsigned 8-bit
                                 ;*	binary number to and ASCII text string.
                                 ;*
                                 ;*	Version 2.0 - Added support for accessing the LCD 
                                 ;*		Display via the serial port. See version 1.0 for 
                                 ;*		accessing a memory mapped LCD display.
                                 ;*
                                 ;***********************************************************
                                 ;*
                                 ;*	 Author: David Zier
                                 ;*	   Date: March 17, 2003
                                 ;*	Company: TekBots(TM), Oregon State University - EECS
                                 ;*	Version: 2.0
                                 ;*
                                 ;***********************************************************
                                 ;*	Rev	Date	Name		Description
                                 ;*----------------------------------------------------------
                                 ;*	-	8/20/02	Zier		Initial Creation of Version 1.0
                                 ;*	A	3/7/03	Zier		V2.0 - Updated for USART LCD
                                 ;*
                                 ;*
                                 ;***********************************************************
                                 
                                 ;***********************************************************
                                 ;*	Internal Register Definitions and Constants
                                 ;*		NOTE: A register MUST be named 'mpr' in the Main Code
                                 ;*			It is recomended to use register r16.
                                 ;*		WARNING: Register r17-r22 are reserved and cannot be
                                 ;*			renamed outside of the LCD Driver functions. Doing
                                 ;*			so will damage the functionality of the LCD Driver
                                 ;***********************************************************
                                 .def	wait = r17				; Wait Loop Register
                                 .def	count = r18				; Character Counter
                                 .def	line = r19				; Line Select Register
                                 .def	type = r20				; LCD data type: Command or Text
                                 .def	q = r21					; Quotient for div10
                                 .def	r = r22					; Remander for div10
                                 
                                 .equ	LCDLine1 = $80			; LCD Line 1 select command
                                 .equ	LCDLine2 = $c0			; LCD Line 2 select command
                                 .equ	LCDClear = $01			; LCD Clear Command
                                 .equ	LCDHome = $02			; LCD Set Cursor Home Command
                                 .equ	LCDPulse = $08			; LCD Pulse signal, used to simulate 
                                 								; write signal
                                 
                                 .equ	LCDCmd = $00			; Constant used to write a command 
                                 .equ	LCDTxt = $01			; Constant used to write a text character
                                 
                                 .equ	LCDMaxCnt = 16			; Maximum number of characters per line
                                 .equ	LCDLn1Addr = $0100		; Beginning address for Line 1 data
                                 .equ	LCDLn2Addr = $0110		; Beginning address for Line 2 data
                                 
                                 ;-----------------------------------------------------------
                                 ;***********************************************************
                                 ;*	Public LCD Driver Suboutines and Functions
                                 ;*		These functions and subroutines can be called safely 
                                 ;*		from within any program
                                 ;***********************************************************
                                 ;-----------------------------------------------------------
                                 
                                 
                                 ;*******************************************************
                                 ;* SubRt: 	LCDInit
                                 ;* Desc: 	Initialize the Serial Port and the Hitachi 
                                 ;*			Display 8 Bit inc DD-RAM 
                                 ;*			Pointer with no features
                                 ;*			- 2 LInes with 16 characters
                                 ;*******************************************************
                                 LCDInit:
000189 930f                      		push	mpr				; Save the state of machine
00018a b70f                      		in		mpr, SREG		; Save the SREG
00018b 930f                      		push	mpr				;
00018c 931f                      		push	wait			; Save wait
                                 
                                 		; Setup the Communication Ports
                                 		; Port B: Output
                                 		; Port D: Input w/ internal pullup resistors
                                 		; Port F: Output on Pin 3
00018d e000                      		ldi		mpr, $00		; Initialize Port B for outputs
00018e bb08                      		out		PORTB, mpr		; Port B outputs high
00018f ef0f                      		ldi		mpr, $ff		; except for any overrides
000190 bb07                      		out		DDRB, mpr		;
000191 e000                      		ldi		mpr, $00		; Initialize Port D for inputs
000192 bb02                      		out		PORTD, mpr		; with Tri-State
000193 e000                      		ldi		mpr, $00		; except for any overrides
000194 bb01                      		out		DDRD, mpr		;
000195 e000                      		ldi		mpr, $00		; Initialize Port F Pin 3 to
000196 9300 0062                 		sts		PORTF, mpr		; output inorder to twiddle the
000198 e008                      		ldi		mpr, (1<<DDF3)	; LCD interface
000199 9300 0061                 		sts		DDRF, mpr		; Must NOT override this port
                                 
                                 		; Setup the Serial Functionality
                                 		; SPI Type: Master
                                 		; SPI Clock Rate: 2*1000.000 kHz
                                 		; SPI Clock Phase: Cycle Half
                                 		; SPI Clock Polarity: Low
                                 		; SPI Data Order: MSB First
00019b e500                      		ldi		mpr, (1<<SPE|1<<MSTR)
00019c b90d                      		out		SPCR, mpr		; Set Serial Port Control Register
00019d e001                      		ldi		mpr, (1<<SPI2X)
00019e b90e                      		out		SPSR, mpr		; Set Serial Port Status Register
                                 
                                 		; Setup External SRAM configuration
                                 		; $0460 - $7FFF / $8000 - $FFFF
                                 		; Lower page wait state(s): None
                                 		; Uppoer page wait state(s): 2r/w
00019f e800                      		ldi		mpr, (1<<SRE)	; 
0001a0 bf05                      		out		MCUCR, mpr		; Initialize MCUCR
0001a1 e402                      		ldi		mpr, (1<<SRL2|1<<SRW11)
0001a2 9300 006d                 		sts		XMCRA, mpr		; Initialize XMCRA
0001a4 e800                      		ldi		mpr, (1<<XMBK)	;
0001a5 9300 006c                 		sts		XMCRB, mpr		; Initialize XMCRB
                                 		
                                 		; Initialize USART0
                                 		; Communication Parameter: 8 bit, 1 stop, No Parity
                                 		; USART0 Rx: On
                                 		; USART0 Tx: On
                                 		; USART0 Mode: Asynchronous
                                 		; USART0 Baudrate: 9600
0001a7 e000                      		ldi		mpr, $00		;
0001a8 b90b                      		out		UCSR0A, mpr		; Init UCSR0A
0001a9 e108                      		ldi		mpr, (1<<RXEN0|1<<TXEN0)
0001aa b90a                      		out		UCSR0B, mpr		; Init UCSR0B
0001ab e006                      		ldi		mpr, (1<<UCSZ01|1<<UCSZ00)
0001ac 9300 0095                 		sts		UCSR0C, mpr		; Init UCSR0C
0001ae e000                      		ldi		mpr, $00		;
0001af 9300 0090                 		sts		UBRR0H, mpr		; Init UBRR0H
0001b1 e607                      		ldi		mpr, $67		;
0001b2 b909                      		out		UBRR0L, mpr		; Init UBRR0L
                                 
                                 		; Initialize the LCD Display
0001b3 e006                      		ldi		mpr, 6			;
                                 LCDINIT_L1:
0001b4 ef1a                      		ldi		wait, 250		; 15ms of Display
0001b5 d0bf                      		rcall	LCDWait			; Bootup wait
0001b6 950a                      		dec		mpr				;
0001b7 f7e1                      		brne	LCDINIT_L1		;
                                 
0001b8 e308                      		ldi		mpr, $38		; Display Mode set
0001b9 d097                      		rcall 	LCDWriteCmd		; 
0001ba e008                      		ldi		mpr, $08		; Display Off
0001bb d095                      		rcall	LCDWriteCmd		;
0001bc e001                      		ldi		mpr, $01		; Display Clear
0001bd d093                      		rcall	LCDWriteCmd		;
0001be e006                      		ldi		mpr, $06		; Entry mode set
0001bf d091                      		rcall	LCDWriteCmd		;
0001c0 e00c                      		ldi		mpr, $0c		; Display on
0001c1 d08f                      		rcall	LCDWriteCmd		;
0001c2 d028                      		rcall	LCDClr			; Clear display
                                 
0001c3 911f                      		pop		wait			; Restore wait
0001c4 910f                      		pop		mpr				; Restore SREG
0001c5 bf0f                      		out		SREG, mpr		;
0001c6 910f                      		pop		mpr				; Restore mpr
0001c7 9508                      		ret						; Return from subroutine
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWrite
                                 ;* Desc:	Generic Write Function that writes both lines
                                 ;*			of text out to the LCD
                                 ;*			- Line 1 data is in address space $0100-$010F
                                 ;*			- Line 2 data is in address space $0110-$010F
                                 ;*******************************************************
                                 LCDWrite:
0001c8 d002                      		rcall LCDWrLn1			; Write Line 1
0001c9 d011                      		rcall LCDWrLn2			; Write Line 2
0001ca 9508                      		ret 					; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWrLn1
                                 ;* Desc:	This function will write the first line of 
                                 ;*			data to the first line of the LCD Display
                                 ;*******************************************************
                                 LCDWrLn1:
0001cb 930f                      		push 	mpr				; Save mpr
0001cc 93ef                      		push	ZL				; Save Z pointer
0001cd 93ff                      		push	ZH				;
0001ce 932f                      		push	count			; Save the count register
0001cf 933f                      		push	line			; Save the line register
                                 								
0001d0 e0e0                      		ldi		ZL, low(LCDLn1Addr)
0001d1 e0f1                      		ldi		ZH, high(LCDLn1Addr)		 
0001d2 e830                      		ldi		line, LCDLine1	; Set LCD line to Line 1
0001d3 d06b                      		rcall	LCDSetLine		; Restart at the beginning of line 1
0001d4 d076                      		rcall	LCDWriteLine	; Write the line of text
                                 
0001d5 913f                      		pop		line
0001d6 912f                      		pop		count			; Restore the counter
0001d7 91ff                      		pop		ZH				; Restore Z pointer
0001d8 91ef                      		pop		ZL				;
0001d9 910f                      		pop 	mpr				; Restore mpr
0001da 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWrLn2
                                 ;* Desc:	This function will write the second line of 
                                 ;*			data to the second line of the LCD Display
                                 ;*******************************************************
                                 LCDWrLn2:
0001db 930f                      		push 	mpr				; Save mpr
0001dc 93ef                      		push	ZL				; Save Z pointer
0001dd 93ff                      		push	ZH				;
0001de 932f                      		push	count			; Save the count register
0001df 933f                      		push	line			; Save the line register
                                 								
0001e0 e1e0                      		ldi		ZL, low(LCDLn2Addr)
0001e1 e0f1                      		ldi		ZH, high(LCDLn2Addr)		 
0001e2 ec30                      		ldi		line, LCDLine2	; Set LCD line to Line 2
0001e3 d05b                      		rcall	LCDSetLine		; Restart at the beginning of line 2
0001e4 d066                      		rcall	LCDWriteLine	; Write the line of text
                                 
0001e5 913f                      		pop		line
0001e6 912f                      		pop		count			; Restore the counter
0001e7 91ff                      		pop		ZH				; Restore Z pointer
0001e8 91ef                      		pop		ZL				;
0001e9 910f                      		pop 	mpr				; Restore mpr
0001ea 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDClr
                                 ;* Desc:	Generic Clear Subroutine that clears both 
                                 ;*			lines of the LCD and Data Memory storage area
                                 ;*******************************************************
                                 LCDClr:
0001eb d002                      		rcall	LCDClrLn1		; Clear Line 1
0001ec d011                      		rcall	LCDClrLn2		; Clear Line 2
0001ed 9508                      		ret						; Return from Subroutine
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDClrLn1
                                 ;* Desc:	This subroutine will clear the first line of 
                                 ;*			the data and the first line of the LCD Display
                                 ;*******************************************************
                                 LCDClrLn1:
0001ee 930f                      		push	mpr				; Save mpr
0001ef 933f                      		push	line			; Save line register
0001f0 932f                      		push	count			; Save the count register
0001f1 93ef                      		push	ZL				; Save Z pointer
0001f2 93ff                      		push	ZH				;
                                 	
0001f3 e830                      		ldi		line, LCDline1	; Set Access to Line 1 of LCD
0001f4 d04a                      		rcall	LCDSetLine		; Set Z pointer to address of line 1 data
0001f5 e0e0                      		ldi		ZL, low(LCDLn1Addr)
0001f6 e0f1                      		ldi		ZH, high(LCDLn1Addr)
0001f7 d04c                      		rcall	LCDClrLine		; Call the Clear Line function
                                 
0001f8 91ff                      		pop		ZH				; Restore Z pointer
0001f9 91ef                      		pop		ZL				;
0001fa 912f                      		pop		count			; Restore the count register
0001fb 913f                      		pop		line			; Restore line register
0001fc 910f                      		pop		mpr				; Restore mpr
0001fd 9508                      		ret						; Return from Subroutine
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDClrLn2
                                 ;* Desc:	This subroutine will clear the second line of 
                                 ;*			the data and the second line of the LCD Display
                                 ;*******************************************************
                                 LCDClrLn2:
0001fe 930f                      		push	mpr				; Save mpr
0001ff 933f                      		push	line			; Save line register
000200 932f                      		push	count			; Save the count register
000201 93ef                      		push	ZL				; Save Z pointer
000202 93ff                      		push	ZH				;
                                 	
000203 ec30                      		ldi		line, LCDline2	; Set Access to Line 2 of LCD
000204 d03a                      		rcall	LCDSetLine		; Set Z pointer to address of line 2 data
000205 e1e0                      		ldi		ZL, low(LCDLn2Addr)
000206 e0f1                      		ldi		ZH, high(LCDLn2Addr)
000207 d03c                      		rcall	LCDClrLine		; Call the Clear Line function
                                 
000208 91ff                      		pop		ZH				; Restore Z pointer
000209 91ef                      		pop		ZL				;
00020a 912f                      		pop		count			; Restore the count register
00020b 913f                      		pop		line			; Restore line register
00020c 910f                      		pop		mpr				; Restore mpr
00020d 9508                      		ret						; Return from Subroutine
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteByte
                                 ;* Desc:	This is a complex and low level function that
                                 ;*			allows any program to write any ASCII character
                                 ;*			(Byte) anywhere in the LCD Display.  There
                                 ;*			are several things that need to be initialized
                                 ;*			before this function is called:
                                 ;*		count - Holds the index value of the line to where
                                 ;*				the char is written, 0-15(39).  i.e. if 
                                 ;*				count has the value of 3, then the char is
                                 ;*				going to be written to the third element of
                                 ;*				the line.
                                 ;*		line  - Holds the line number that the char is going
                                 ;*				to be written to, (1 or 2).
                                 ;*		mpr	  - Contains the value of the ASCII character to 
                                 ;*				be written (0-255)
                                 ;*********************************************************
                                 LCDWriteByte:
00020e 930f                      		push	mpr				; Save the mpr
00020f 933f                      		push	line			; Save the line
000210 932f                      		push	count			; Save the count
                                 								; Preform sanity checks on count and line
000211 3228                      		cpi		count, 40		; Make sure count is within range
000212 f450                      		brsh	LCDWriteByte_3	; Do nothing and exit function
000213 3031                      		cpi		line, 1			; If (line == 1)
000214 f411                      		brne	LCDWriteByte_1	; 
000215 e830                      		ldi		line, LCDLine1	; Load line 1 base LCD Address
000216 c003                      		rjmp	LCDWriteByte_2	; Continue on with function
                                 LCDWriteByte_1:					
000217 3032                      		cpi		line, 2			; If (line == 2)
000218 f421                      		brne	LCDWriteByte_3	; Do nothing and exit function
000219 ec30                      		ldi		line, LCDLine2	; Load line 2 base LCD Address
                                 
                                 LCDWriteByte_2:					; Write char to LCD
00021a 0f32                      		add		line, count		; Set the correct LCD address
00021b d023                      		rcall	LCDSetLine		; Set the line address to LCD
00021c d042                      		rcall	LCDWriteChar	; Write Char to LCD Display		
                                 		
                                 LCDWriteByte_3:					; Exit Function
00021d 912f                      		pop		count			; Restore the count
00021e 913f                      		pop		line			; Restore the line
00021f 910f                      		pop		mpr				; Restore the mpr
000220 9508                      		ret						; Return from function
                                 		 
                                 ;*******************************************************
                                 ;* Func:	Bin2ASCII
                                 ;* Desc:	Converts a binary number into an ASCII 
                                 ;*			text string equivalent. 
                                 ;*			- The binary number needs to be in the mpr
                                 ;*			- The Start Address of where the text will
                                 ;*			 	be placed needs to be in the X Register
                                 ;*			- The count of the characters created are 
                                 ;*				added to the count register
                                 ;*******************************************************
                                 Bin2ASCII:
000221 930f                      		push	mpr				; save mpr
000222 936f                      		push	r				; save r
000223 935f                      		push	q				; save q
000224 93bf                      		push	XH				; save X-pointer
000225 93af                      		push	XL				;
                                 
                                 		; Determine the range of mpr
000226 3604                      		cpi		mpr, 100		; is mpr >= 100
000227 f018                      		brlo	B2A_1			; goto next check
000228 e023                      		ldi		count, 3		; Three chars are written
000229 9613                      		adiw	XL, 3			; Increment X 3 address spaces
00022a c007                      		rjmp	B2A_3			; Continue with program
00022b 300a                      B2A_1:	cpi		mpr, 10			; is mpr >= 10
00022c f018                      		brlo	B2A_2			; Continue with program
00022d e022                      		ldi		count, 2		; Two chars are written
00022e 9612                      		adiw	XL, 2			; Increment X 2 address spaces
00022f c002                      		rjmp	B2A_3			; Continue with program
000230 9611                      B2A_2:	adiw	XL, 1			; Increment X 1 address space
000231 e021                      		ldi		count, 1 		; One char is written
                                 
                                 B2A_3:	;Do-While statement that converts Binary to ASCII
000232 d04a                      		rcall	div10			; Call the div10 function
000233 e300                      		ldi		mpr, '0'		; Set the base ASCII integer value
000234 0f06                      		add		mpr, r			; Create the ASCII integer value
000235 930e                      		st		-X, mpr			; Load ASCII value to memory
000236 2f05                      		mov		mpr, q			; Set mpr to quotiant value
000237 3000                      		cpi		mpr, 0			; does mpr == 0
000238 f7c9                      		brne	B2A_3			; do while (mpr != 0)
                                 
000239 91af                      		pop		XL				; restore X-pointer
00023a 91bf                      		pop		XH				;
00023b 915f                      		pop 	q				; restore q
00023c 916f                      		pop		r				; restore r
00023d 910f                      		pop		mpr				; restore mpr
00023e 9508                      		ret						; return from function
                                 
                                 ;-------------------------------------------------------
                                 ;*******************************************************
                                 ;* Private LCD Driver Functions and Subroutines
                                 ;*	NOTE: It is not recommended to call these functions
                                 ;*	      or subroutines, only call the Public ones.
                                 ;*******************************************************
                                 ;-------------------------------------------------------
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDSetLine
                                 ;* Desc:	Change line to be written to 
                                 ;*******************************************************
                                 LCDSetLine:
00023f 930f                      		push	mpr				; Save mpr
000240 2f03                      		mov		mpr,line		; Copy Command Data to mpr
000241 d00f                      		rcall	LCDWriteCmd		; Write the Command
000242 910f                      		pop		mpr				; Restore the mpr
000243 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDClrLine
                                 ;* Desc:	Manually clears a single line within an LCD
                                 ;*			Display and Data Memory by writing 16 
                                 ;*			consecutive ASCII spaces $20 to both the LCD 
                                 ;*			and the memory.  The line to be cleared must
                                 ;*			first be set in the LCD and the Z pointer is
                                 ;*			pointing the first element in Data Memory
                                 ;*******************************************************
                                 LCDClrLine:
000244 e200                      		ldi		mpr, ' '		; The space char to be written
000245 e120                      		ldi		count, LCDMaxCnt; The character count
                                 LCDClrLine_1:
000246 9301                      		st		Z+, mpr			; Clear data memory element
000247 d017                      		rcall	LCDWriteChar	; Clear LCD memory element
000248 952a                      		dec		count			; Decrement the count
000249 f7e1                      		brne	LCDClrLine_1	; Continue untill all elements are cleared
00024a 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteLine
                                 ;* Desc:	Writes a line of text to the LCD Display.
                                 ;*			This routine takes a data element pointed to
                                 ;*			by the Z-pointer and copies it to the LCD 
                                 ;*			Display for the duration of the line.  The
                                 ;*			line the Z-pointer must be set prior to the 
                                 ;*			function call.
                                 ;*******************************************************
                                 LCDWriteLine:
00024b e120                      		ldi		count, LCDMaxCnt; The character count
                                 LCDWriteLine_1:
00024c 9101                      		ld		mpr, Z+			; Get the data element
00024d d011                      		rcall	LCDWriteChar	; Write element to LCD Display
00024e 952a                      		dec		count			; Decrement the count
00024f f7e1                      		brne	LCDWriteLine_1	; Continue untill all elements are written
000250 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteCmd
                                 ;* Desc:	Write command that is in the mpr to LCD 
                                 ;*******************************************************
                                 LCDWriteCmd:
000251 934f                      		push	type			; Save type register
000252 931f                      		push	wait			; Save wait register
000253 e040                      		ldi		type, LCDCmd	; Set type to Command data
000254 d013                      		rcall	LCDWriteData	; Write data to LCD
000255 930f                      		push	mpr				; Save mpr register
000256 e002                      		ldi		mpr, 2			; Wait approx. 4.1 ms
                                 LCDWC_L1:
000257 ec1d                      		ldi		wait, 205		; Wait 2050 us
000258 d01c                      		rcall	LCDWait			;
000259 950a                      		dec		mpr				; The wait loop cont.
00025a f7e1                      		brne	LCDWC_L1		;
00025b 910f                      		pop		mpr				; Restore mpr
00025c 911f                      		pop		wait			; Restore wait register
00025d 914f                      		pop		type			; Restore type register
00025e 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteChar
                                 ;* Desc:	Write character data that is in the mpr
                                 ;*******************************************************
                                 LCDWriteChar:
00025f 934f                      		push	type			; Save type register
000260 931f                      		push	wait			; Save the wait register
000261 e041                      		ldi		type, LCDTxt	; Set type to Text data
000262 d005                      		rcall	LCDWriteData	; Write data to LCD
000263 e110                      		ldi		wait, 16		; Delay 160 us
000264 d010                      		rcall	LCDWait			;
000265 911f                      		pop		wait			; Restore wait register
000266 914f                      		pop		type			; Restore type register
000267 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteData
                                 ;* Desc:	Write data or command to LCD 
                                 ;*******************************************************
                                 LCDWriteData:
000268 b94f                      		out		SPDR, type		; Send type to SP
000269 e012                      		ldi		wait, 2			; Wait 2 us
00026a d00a                      		rcall	LCDWait			; Call Wait function
00026b b90f                      		out		SPDR,mpr		; Send data to serial port
00026c e012                      		ldi		wait, 2			; Wait 2 us
00026d d007                      		rcall	LCDWait			; Call Wait function
00026e e018                      		ldi		wait, LCDPulse	; Use wait temporarially to 
00026f 9310 0062                 		sts		PORTF, wait		; to send write pulse to LCD
000271 e010                      		ldi		wait, $00		;
000272 9310 0062                 		sts		PORTF, wait		;
000274 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWait
                                 ;* Desc:	A wait loop that is 10 + 159*wait cycles or
                                 ;*			roughly wait*10us.  Just initialize wait
                                 ;*			for the specific amount of time in 10us 
                                 ;*			intervals.
                                 ;*******************************************************
000275 930f                      LCDWait:push	mpr				; Save mpr
000276 e409                      LCDW_L1:ldi		mpr, $49		; Load with a 10us value
000277 950a                      LCDW_L2:dec		mpr				; Inner Wait Loop
000278 f7f1                      		brne	LCDW_L2
000279 951a                      		dec		wait			; Outer Wait Loop
00027a f7d9                      		brne	LCDW_L1
00027b 910f                      		pop		mpr				; Restore mpr
00027c 9508                      		ret						; Return from Wait Function
                                 
                                 ;*******************************************************
                                 ;*	Bin2ASCII routines that can be used as a psuedo-
                                 ;*			printf function to convert an 8-bit binary
                                 ;*			number into the unigned decimal ASCII text
                                 ;*******************************************************
                                 
                                 ;***********************************************************
                                 ;* Func:	div10
                                 ;* Desc:	Divides the value in the mpr by 10 and 
                                 ;*			puts the remander in the 'r' register and
                                 ;*			and the quotiant in the 'q' register.
                                 ;*	DO NOT modify this function, trust me, it does
                                 ;*	divide by 10 :)  ~DZ		
                                 ;***********************************************************
                                 div10:
00027d 920f                      		push	r0				; Save register
                                 
                                 		; q = mpr / 10 = mpr * 0.000110011001101b
00027e 2f50                      		mov		q, mpr			; q = mpr * 1.0b
00027f 9556                      		lsr		q				; q >> 2
000280 9556                      		lsr		q				; q = mpr * 0.01b
000281 0f50                      		add		q, mpr			; q = (q + mpr) >> 1
000282 9556                      		lsr		q				; q = mpr * 0.101b
000283 0f50                      		add		q, mpr			; q = (q + mpr) >> 3
000284 9556                      		lsr		q
000285 9556                      		lsr		q
000286 9556                      		lsr		q				; q = mpr * 0.001101b
000287 0f50                      		add		q, mpr			; q = (q + mpr) >> 1
000288 9556                      		lsr		q				; q = mpr * 0.1001101b
000289 0f50                      		add		q, mpr			; q = (q + mpr) >> 3
00028a 9556                      		lsr		q				
00028b 9556                      		lsr		q
00028c 9556                      		lsr		q				; q = mpr * 0.0011001101b
00028d 0f50                      		add		q, mpr			; q = (q + mpr) >> 1
00028e 9556                      		lsr		q				; q = mpr * 0.10011001101b
00028f 0f50                      		add		q, mpr			; q = (q + mpr) >> 4
000290 9556                      		lsr		q
000291 9556                      		lsr		q
000292 9556                      		lsr		q
000293 9556                      		lsr		q				; q = mpr * 0.000110011001101b
                                 
                                 		; compute the remainder as r = i - 10 * q
                                 		; calculate r = q * 10 = q * 1010b
000294 2f65                      		mov		r, q			; r = q * 1
000295 0f66                      		lsl		r				; r << 2
000296 0f66                      		lsl		r				; r = q * 100b
000297 0f65                      		add		r, q			; r = (r + q) << 1
000298 0f66                      		lsl		r				; r = q * 1010b
000299 2e06                      		mov		r0, r			; r0 = 10 * q
00029a 2f60                      		mov		r, mpr			; r = mpr
00029b 1960                      		sub		r, r0			; r = mpr - 10 * q
                                 
                                 		; Fix any errors that occur
00029c 306a                      div10_1:cpi		r, 10			; Compare with 10
00029d f018                      		brlo	div10_2			; do nothing if r < 10
00029e 9553                      		inc		q				; fix qoutient
00029f 506a                      		subi	r, 10			; fix remainder
0002a0 cffb                      		rjmp	div10_1			; Continue until error is corrected
                                 
0002a1 900f                      div10_2:pop		r0				; Restore registers
0002a2 9508                      		ret						; Return from function


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega128" register use summary:
x  :   1 y  :   5 z  :  11 r0 :   4 r1 :   0 r2 :   1 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 151 r17:  36 r18:  37 r19:  26 r20:  13 
r21:  32 r22:  13 r23:  12 r24:   9 r25:   0 r26:   5 r27:   2 r28:   4 
r29:   4 r30:  23 r31:  21 
Registers used: 20 out of 35 (57.1%)

"ATmega128" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :  13 adiw  :   3 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   4 break :   0 breq  :   5 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :  26 brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   3 clh   :   0 cli   :   3 cln   :   0 clr   :   1 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   1 cpc   :   0 
cpi   :  17 cpse  :   0 dec   :  18 elpm  :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   3 inc   :   6 
jmp   :  11 ld    :   3 ldd   :   0 ldi   : 118 lds   :   0 lpm   :   9 
lsl   :   3 lsr   :  15 mov   :   7 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  35 
pop   :  49 push  :  49 rcall :  63 ret   :  28 reti  :   2 rjmp  :  12 
rol   :   3 ror   :   2 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 
sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   6 std   :   0 
sts   :   8 sub   :   1 subi  :   2 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 36 out of 114 (31.6%)

"ATmega128" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000546   1104    116   1220  131072   0.9%
[.dseg] 0x000100 0x000202      0      2      2    4096   0.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 8 warnings
